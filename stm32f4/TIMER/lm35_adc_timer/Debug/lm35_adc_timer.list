
lm35_adc_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f4c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080030d4  080030d4  000040d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030e4  080030e4  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080030e4  080030e4  000040e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030ec  080030ec  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030ec  080030ec  000040ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030f0  080030f0  000040f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080030f4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000bc  20000010  20000010  00005010  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200000cc  200000cc  00005010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ab12  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ae6  00000000  00000000  0000fb4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b08  00000000  00000000  00011638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000887  00000000  00000000  00012140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002122e  00000000  00000000  000129c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c16a  00000000  00000000  00033bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1a6b  00000000  00000000  0003fd5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001117ca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f2c  00000000  00000000  00111810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0011473c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080030bc 	.word	0x080030bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080030bc 	.word	0x080030bc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_uldivmod>:
 8000964:	b953      	cbnz	r3, 800097c <__aeabi_uldivmod+0x18>
 8000966:	b94a      	cbnz	r2, 800097c <__aeabi_uldivmod+0x18>
 8000968:	2900      	cmp	r1, #0
 800096a:	bf08      	it	eq
 800096c:	2800      	cmpeq	r0, #0
 800096e:	bf1c      	itt	ne
 8000970:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000974:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000978:	f000 b988 	b.w	8000c8c <__aeabi_idiv0>
 800097c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000980:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000984:	f000 f806 	bl	8000994 <__udivmoddi4>
 8000988:	f8dd e004 	ldr.w	lr, [sp, #4]
 800098c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000990:	b004      	add	sp, #16
 8000992:	4770      	bx	lr

08000994 <__udivmoddi4>:
 8000994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000998:	9d08      	ldr	r5, [sp, #32]
 800099a:	468e      	mov	lr, r1
 800099c:	4604      	mov	r4, r0
 800099e:	4688      	mov	r8, r1
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d14a      	bne.n	8000a3a <__udivmoddi4+0xa6>
 80009a4:	428a      	cmp	r2, r1
 80009a6:	4617      	mov	r7, r2
 80009a8:	d962      	bls.n	8000a70 <__udivmoddi4+0xdc>
 80009aa:	fab2 f682 	clz	r6, r2
 80009ae:	b14e      	cbz	r6, 80009c4 <__udivmoddi4+0x30>
 80009b0:	f1c6 0320 	rsb	r3, r6, #32
 80009b4:	fa01 f806 	lsl.w	r8, r1, r6
 80009b8:	fa20 f303 	lsr.w	r3, r0, r3
 80009bc:	40b7      	lsls	r7, r6
 80009be:	ea43 0808 	orr.w	r8, r3, r8
 80009c2:	40b4      	lsls	r4, r6
 80009c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009c8:	fa1f fc87 	uxth.w	ip, r7
 80009cc:	fbb8 f1fe 	udiv	r1, r8, lr
 80009d0:	0c23      	lsrs	r3, r4, #16
 80009d2:	fb0e 8811 	mls	r8, lr, r1, r8
 80009d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009da:	fb01 f20c 	mul.w	r2, r1, ip
 80009de:	429a      	cmp	r2, r3
 80009e0:	d909      	bls.n	80009f6 <__udivmoddi4+0x62>
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80009e8:	f080 80ea 	bcs.w	8000bc0 <__udivmoddi4+0x22c>
 80009ec:	429a      	cmp	r2, r3
 80009ee:	f240 80e7 	bls.w	8000bc0 <__udivmoddi4+0x22c>
 80009f2:	3902      	subs	r1, #2
 80009f4:	443b      	add	r3, r7
 80009f6:	1a9a      	subs	r2, r3, r2
 80009f8:	b2a3      	uxth	r3, r4
 80009fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80009fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a06:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a0a:	459c      	cmp	ip, r3
 8000a0c:	d909      	bls.n	8000a22 <__udivmoddi4+0x8e>
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000a14:	f080 80d6 	bcs.w	8000bc4 <__udivmoddi4+0x230>
 8000a18:	459c      	cmp	ip, r3
 8000a1a:	f240 80d3 	bls.w	8000bc4 <__udivmoddi4+0x230>
 8000a1e:	443b      	add	r3, r7
 8000a20:	3802      	subs	r0, #2
 8000a22:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a26:	eba3 030c 	sub.w	r3, r3, ip
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	b11d      	cbz	r5, 8000a36 <__udivmoddi4+0xa2>
 8000a2e:	40f3      	lsrs	r3, r6
 8000a30:	2200      	movs	r2, #0
 8000a32:	e9c5 3200 	strd	r3, r2, [r5]
 8000a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3a:	428b      	cmp	r3, r1
 8000a3c:	d905      	bls.n	8000a4a <__udivmoddi4+0xb6>
 8000a3e:	b10d      	cbz	r5, 8000a44 <__udivmoddi4+0xb0>
 8000a40:	e9c5 0100 	strd	r0, r1, [r5]
 8000a44:	2100      	movs	r1, #0
 8000a46:	4608      	mov	r0, r1
 8000a48:	e7f5      	b.n	8000a36 <__udivmoddi4+0xa2>
 8000a4a:	fab3 f183 	clz	r1, r3
 8000a4e:	2900      	cmp	r1, #0
 8000a50:	d146      	bne.n	8000ae0 <__udivmoddi4+0x14c>
 8000a52:	4573      	cmp	r3, lr
 8000a54:	d302      	bcc.n	8000a5c <__udivmoddi4+0xc8>
 8000a56:	4282      	cmp	r2, r0
 8000a58:	f200 8105 	bhi.w	8000c66 <__udivmoddi4+0x2d2>
 8000a5c:	1a84      	subs	r4, r0, r2
 8000a5e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a62:	2001      	movs	r0, #1
 8000a64:	4690      	mov	r8, r2
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d0e5      	beq.n	8000a36 <__udivmoddi4+0xa2>
 8000a6a:	e9c5 4800 	strd	r4, r8, [r5]
 8000a6e:	e7e2      	b.n	8000a36 <__udivmoddi4+0xa2>
 8000a70:	2a00      	cmp	r2, #0
 8000a72:	f000 8090 	beq.w	8000b96 <__udivmoddi4+0x202>
 8000a76:	fab2 f682 	clz	r6, r2
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	f040 80a4 	bne.w	8000bc8 <__udivmoddi4+0x234>
 8000a80:	1a8a      	subs	r2, r1, r2
 8000a82:	0c03      	lsrs	r3, r0, #16
 8000a84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a88:	b280      	uxth	r0, r0
 8000a8a:	b2bc      	uxth	r4, r7
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a92:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a9a:	fb04 f20c 	mul.w	r2, r4, ip
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d907      	bls.n	8000ab2 <__udivmoddi4+0x11e>
 8000aa2:	18fb      	adds	r3, r7, r3
 8000aa4:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x11c>
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	f200 80e0 	bhi.w	8000c70 <__udivmoddi4+0x2dc>
 8000ab0:	46c4      	mov	ip, r8
 8000ab2:	1a9b      	subs	r3, r3, r2
 8000ab4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ab8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000abc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ac0:	fb02 f404 	mul.w	r4, r2, r4
 8000ac4:	429c      	cmp	r4, r3
 8000ac6:	d907      	bls.n	8000ad8 <__udivmoddi4+0x144>
 8000ac8:	18fb      	adds	r3, r7, r3
 8000aca:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000ace:	d202      	bcs.n	8000ad6 <__udivmoddi4+0x142>
 8000ad0:	429c      	cmp	r4, r3
 8000ad2:	f200 80ca 	bhi.w	8000c6a <__udivmoddi4+0x2d6>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	1b1b      	subs	r3, r3, r4
 8000ada:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ade:	e7a5      	b.n	8000a2c <__udivmoddi4+0x98>
 8000ae0:	f1c1 0620 	rsb	r6, r1, #32
 8000ae4:	408b      	lsls	r3, r1
 8000ae6:	fa22 f706 	lsr.w	r7, r2, r6
 8000aea:	431f      	orrs	r7, r3
 8000aec:	fa0e f401 	lsl.w	r4, lr, r1
 8000af0:	fa20 f306 	lsr.w	r3, r0, r6
 8000af4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000af8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000afc:	4323      	orrs	r3, r4
 8000afe:	fa00 f801 	lsl.w	r8, r0, r1
 8000b02:	fa1f fc87 	uxth.w	ip, r7
 8000b06:	fbbe f0f9 	udiv	r0, lr, r9
 8000b0a:	0c1c      	lsrs	r4, r3, #16
 8000b0c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b10:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b14:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b18:	45a6      	cmp	lr, r4
 8000b1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b1e:	d909      	bls.n	8000b34 <__udivmoddi4+0x1a0>
 8000b20:	193c      	adds	r4, r7, r4
 8000b22:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000b26:	f080 809c 	bcs.w	8000c62 <__udivmoddi4+0x2ce>
 8000b2a:	45a6      	cmp	lr, r4
 8000b2c:	f240 8099 	bls.w	8000c62 <__udivmoddi4+0x2ce>
 8000b30:	3802      	subs	r0, #2
 8000b32:	443c      	add	r4, r7
 8000b34:	eba4 040e 	sub.w	r4, r4, lr
 8000b38:	fa1f fe83 	uxth.w	lr, r3
 8000b3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b40:	fb09 4413 	mls	r4, r9, r3, r4
 8000b44:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b48:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b4c:	45a4      	cmp	ip, r4
 8000b4e:	d908      	bls.n	8000b62 <__udivmoddi4+0x1ce>
 8000b50:	193c      	adds	r4, r7, r4
 8000b52:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000b56:	f080 8082 	bcs.w	8000c5e <__udivmoddi4+0x2ca>
 8000b5a:	45a4      	cmp	ip, r4
 8000b5c:	d97f      	bls.n	8000c5e <__udivmoddi4+0x2ca>
 8000b5e:	3b02      	subs	r3, #2
 8000b60:	443c      	add	r4, r7
 8000b62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b66:	eba4 040c 	sub.w	r4, r4, ip
 8000b6a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b6e:	4564      	cmp	r4, ip
 8000b70:	4673      	mov	r3, lr
 8000b72:	46e1      	mov	r9, ip
 8000b74:	d362      	bcc.n	8000c3c <__udivmoddi4+0x2a8>
 8000b76:	d05f      	beq.n	8000c38 <__udivmoddi4+0x2a4>
 8000b78:	b15d      	cbz	r5, 8000b92 <__udivmoddi4+0x1fe>
 8000b7a:	ebb8 0203 	subs.w	r2, r8, r3
 8000b7e:	eb64 0409 	sbc.w	r4, r4, r9
 8000b82:	fa04 f606 	lsl.w	r6, r4, r6
 8000b86:	fa22 f301 	lsr.w	r3, r2, r1
 8000b8a:	431e      	orrs	r6, r3
 8000b8c:	40cc      	lsrs	r4, r1
 8000b8e:	e9c5 6400 	strd	r6, r4, [r5]
 8000b92:	2100      	movs	r1, #0
 8000b94:	e74f      	b.n	8000a36 <__udivmoddi4+0xa2>
 8000b96:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b9a:	0c01      	lsrs	r1, r0, #16
 8000b9c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	4638      	mov	r0, r7
 8000baa:	463c      	mov	r4, r7
 8000bac:	46b8      	mov	r8, r7
 8000bae:	46be      	mov	lr, r7
 8000bb0:	2620      	movs	r6, #32
 8000bb2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bb6:	eba2 0208 	sub.w	r2, r2, r8
 8000bba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bbe:	e766      	b.n	8000a8e <__udivmoddi4+0xfa>
 8000bc0:	4601      	mov	r1, r0
 8000bc2:	e718      	b.n	80009f6 <__udivmoddi4+0x62>
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	e72c      	b.n	8000a22 <__udivmoddi4+0x8e>
 8000bc8:	f1c6 0220 	rsb	r2, r6, #32
 8000bcc:	fa2e f302 	lsr.w	r3, lr, r2
 8000bd0:	40b7      	lsls	r7, r6
 8000bd2:	40b1      	lsls	r1, r6
 8000bd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000bd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	fbb3 f8fe 	udiv	r8, r3, lr
 8000be2:	b2bc      	uxth	r4, r7
 8000be4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000be8:	0c11      	lsrs	r1, r2, #16
 8000bea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bee:	fb08 f904 	mul.w	r9, r8, r4
 8000bf2:	40b0      	lsls	r0, r6
 8000bf4:	4589      	cmp	r9, r1
 8000bf6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000bfa:	b280      	uxth	r0, r0
 8000bfc:	d93e      	bls.n	8000c7c <__udivmoddi4+0x2e8>
 8000bfe:	1879      	adds	r1, r7, r1
 8000c00:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000c04:	d201      	bcs.n	8000c0a <__udivmoddi4+0x276>
 8000c06:	4589      	cmp	r9, r1
 8000c08:	d81f      	bhi.n	8000c4a <__udivmoddi4+0x2b6>
 8000c0a:	eba1 0109 	sub.w	r1, r1, r9
 8000c0e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c12:	fb09 f804 	mul.w	r8, r9, r4
 8000c16:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c1a:	b292      	uxth	r2, r2
 8000c1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c20:	4542      	cmp	r2, r8
 8000c22:	d229      	bcs.n	8000c78 <__udivmoddi4+0x2e4>
 8000c24:	18ba      	adds	r2, r7, r2
 8000c26:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000c2a:	d2c4      	bcs.n	8000bb6 <__udivmoddi4+0x222>
 8000c2c:	4542      	cmp	r2, r8
 8000c2e:	d2c2      	bcs.n	8000bb6 <__udivmoddi4+0x222>
 8000c30:	f1a9 0102 	sub.w	r1, r9, #2
 8000c34:	443a      	add	r2, r7
 8000c36:	e7be      	b.n	8000bb6 <__udivmoddi4+0x222>
 8000c38:	45f0      	cmp	r8, lr
 8000c3a:	d29d      	bcs.n	8000b78 <__udivmoddi4+0x1e4>
 8000c3c:	ebbe 0302 	subs.w	r3, lr, r2
 8000c40:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c44:	3801      	subs	r0, #1
 8000c46:	46e1      	mov	r9, ip
 8000c48:	e796      	b.n	8000b78 <__udivmoddi4+0x1e4>
 8000c4a:	eba7 0909 	sub.w	r9, r7, r9
 8000c4e:	4449      	add	r1, r9
 8000c50:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c54:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c58:	fb09 f804 	mul.w	r8, r9, r4
 8000c5c:	e7db      	b.n	8000c16 <__udivmoddi4+0x282>
 8000c5e:	4673      	mov	r3, lr
 8000c60:	e77f      	b.n	8000b62 <__udivmoddi4+0x1ce>
 8000c62:	4650      	mov	r0, sl
 8000c64:	e766      	b.n	8000b34 <__udivmoddi4+0x1a0>
 8000c66:	4608      	mov	r0, r1
 8000c68:	e6fd      	b.n	8000a66 <__udivmoddi4+0xd2>
 8000c6a:	443b      	add	r3, r7
 8000c6c:	3a02      	subs	r2, #2
 8000c6e:	e733      	b.n	8000ad8 <__udivmoddi4+0x144>
 8000c70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c74:	443b      	add	r3, r7
 8000c76:	e71c      	b.n	8000ab2 <__udivmoddi4+0x11e>
 8000c78:	4649      	mov	r1, r9
 8000c7a:	e79c      	b.n	8000bb6 <__udivmoddi4+0x222>
 8000c7c:	eba1 0109 	sub.w	r1, r1, r9
 8000c80:	46c4      	mov	ip, r8
 8000c82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c86:	fb09 f804 	mul.w	r8, r9, r4
 8000c8a:	e7c4      	b.n	8000c16 <__udivmoddi4+0x282>

08000c8c <__aeabi_idiv0>:
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN PFP */


// ADC dönüşüm tamamlandığında çağrılır
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a16      	ldr	r2, [pc, #88]	@ (8000cf8 <HAL_ADC_ConvCpltCallback+0x68>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d126      	bne.n	8000cf0 <HAL_ADC_ConvCpltCallback+0x60>
    {
        value = HAL_ADC_GetValue(&hadc1);
 8000ca2:	4816      	ldr	r0, [pc, #88]	@ (8000cfc <HAL_ADC_ConvCpltCallback+0x6c>)
 8000ca4:	f000 fd54 	bl	8001750 <HAL_ADC_GetValue>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	4a15      	ldr	r2, [pc, #84]	@ (8000d00 <HAL_ADC_ConvCpltCallback+0x70>)
 8000cac:	6013      	str	r3, [r2, #0]
        sicaklik = (value * 5.0 * 100.0) / 4096.0;
 8000cae:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <HAL_ADC_ConvCpltCallback+0x70>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fbca 	bl	800044c <__aeabi_ui2d>
 8000cb8:	f04f 0200 	mov.w	r2, #0
 8000cbc:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <HAL_ADC_ConvCpltCallback+0x74>)
 8000cbe:	f7ff fc3f 	bl	8000540 <__aeabi_dmul>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <HAL_ADC_ConvCpltCallback+0x78>)
 8000cd0:	f7ff fc36 	bl	8000540 <__aeabi_dmul>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	4610      	mov	r0, r2
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f04f 0200 	mov.w	r2, #0
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000ce2:	f7ff fd57 	bl	8000794 <__aeabi_ddiv>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	460b      	mov	r3, r1
 8000cea:	4909      	ldr	r1, [pc, #36]	@ (8000d10 <HAL_ADC_ConvCpltCallback+0x80>)
 8000cec:	e9c1 2300 	strd	r2, r3, [r1]
    }
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40012000 	.word	0x40012000
 8000cfc:	2000002c 	.word	0x2000002c
 8000d00:	200000bc 	.word	0x200000bc
 8000d04:	40140000 	.word	0x40140000
 8000d08:	40590000 	.word	0x40590000
 8000d0c:	40b00000 	.word	0x40b00000
 8000d10:	200000c0 	.word	0x200000c0

08000d14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

    if(htim->Instance == TIM7)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d102      	bne.n	8000d2c <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        HAL_ADC_Start_IT(&hadc1);
 8000d26:	4804      	ldr	r0, [pc, #16]	@ (8000d38 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000d28:	f000 fb24 	bl	8001374 <HAL_ADC_Start_IT>
    }
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40001400 	.word	0x40001400
 8000d38:	2000002c 	.word	0x2000002c

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d40:	f000 fa62 	bl	8001208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d44:	f000 f812 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d48:	f000 f916 	bl	8000f78 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d4c:	f000 f86c 	bl	8000e28 <MX_ADC1_Init>
  MX_TIM7_Init();
 8000d50:	f000 f8dc 	bl	8000f0c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000d54:	4803      	ldr	r0, [pc, #12]	@ (8000d64 <main+0x28>)
 8000d56:	f000 fb0d 	bl	8001374 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000d5a:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <main+0x2c>)
 8000d5c:	f001 fec4 	bl	8002ae8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <main+0x24>
 8000d64:	2000002c 	.word	0x2000002c
 8000d68:	20000074 	.word	0x20000074

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b094      	sub	sp, #80	@ 0x50
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	2230      	movs	r2, #48	@ 0x30
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 f972 	bl	8003064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	4b22      	ldr	r3, [pc, #136]	@ (8000e20 <SystemClock_Config+0xb4>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d98:	4a21      	ldr	r2, [pc, #132]	@ (8000e20 <SystemClock_Config+0xb4>)
 8000d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e20 <SystemClock_Config+0xb4>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <SystemClock_Config+0xb8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e24 <SystemClock_Config+0xb8>)
 8000db6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <SystemClock_Config+0xb8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd8:	f107 0320 	add.w	r3, r7, #32
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 fa0f 	bl	8002200 <HAL_RCC_OscConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000de8:	f000 f8e0 	bl	8000fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dec:	230f      	movs	r3, #15
 8000dee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000df0:	2300      	movs	r3, #0
 8000df2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fc72 	bl	80026f0 <HAL_RCC_ClockConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e12:	f000 f8cb 	bl	8000fac <Error_Handler>
  }
}
 8000e16:	bf00      	nop
 8000e18:	3750      	adds	r7, #80	@ 0x50
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40007000 	.word	0x40007000

08000e28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	@ 0x28
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000e2e:	f107 0310 	add.w	r3, r7, #16
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	611a      	str	r2, [r3, #16]
 8000e3e:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e40:	463b      	mov	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000efc <MX_ADC1_Init+0xd4>)
 8000e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8000f00 <MX_ADC1_Init+0xd8>)
 8000e50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e52:	4b2a      	ldr	r3, [pc, #168]	@ (8000efc <MX_ADC1_Init+0xd4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e58:	4b28      	ldr	r3, [pc, #160]	@ (8000efc <MX_ADC1_Init+0xd4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e5e:	4b27      	ldr	r3, [pc, #156]	@ (8000efc <MX_ADC1_Init+0xd4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e64:	4b25      	ldr	r3, [pc, #148]	@ (8000efc <MX_ADC1_Init+0xd4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e6a:	4b24      	ldr	r3, [pc, #144]	@ (8000efc <MX_ADC1_Init+0xd4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e72:	4b22      	ldr	r3, [pc, #136]	@ (8000efc <MX_ADC1_Init+0xd4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e78:	4b20      	ldr	r3, [pc, #128]	@ (8000efc <MX_ADC1_Init+0xd4>)
 8000e7a:	4a22      	ldr	r2, [pc, #136]	@ (8000f04 <MX_ADC1_Init+0xdc>)
 8000e7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <MX_ADC1_Init+0xd4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <MX_ADC1_Init+0xd4>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <MX_ADC1_Init+0xd4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e92:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <MX_ADC1_Init+0xd4>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e98:	4818      	ldr	r0, [pc, #96]	@ (8000efc <MX_ADC1_Init+0xd4>)
 8000e9a:	f000 fa27 	bl	80012ec <HAL_ADC_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000ea4:	f000 f882 	bl	8000fac <Error_Handler>
  }

  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <MX_ADC1_Init+0xe0>)
 8000eaa:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.ITMode = DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480d      	ldr	r0, [pc, #52]	@ (8000efc <MX_ADC1_Init+0xd4>)
 8000ec6:	f000 fd87 	bl	80019d8 <HAL_ADC_AnalogWDGConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ed0:	f000 f86c 	bl	8000fac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	@ (8000efc <MX_ADC1_Init+0xd4>)
 8000ee6:	f000 fc55 	bl	8001794 <HAL_ADC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000ef0:	f000 f85c 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	@ 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000002c 	.word	0x2000002c
 8000f00:	40012000 	.word	0x40012000
 8000f04:	0f000001 	.word	0x0f000001
 8000f08:	00800200 	.word	0x00800200

08000f0c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f12:	463b      	mov	r3, r7
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <MX_TIM7_Init+0x64>)
 8000f1c:	4a15      	ldr	r2, [pc, #84]	@ (8000f74 <MX_TIM7_Init+0x68>)
 8000f1e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16000;
 8000f20:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <MX_TIM7_Init+0x64>)
 8000f22:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000f26:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f28:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <MX_TIM7_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <MX_TIM7_Init+0x64>)
 8000f30:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f34:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <MX_TIM7_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f3c:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <MX_TIM7_Init+0x64>)
 8000f3e:	f001 fd83 	bl	8002a48 <HAL_TIM_Base_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000f48:	f000 f830 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <MX_TIM7_Init+0x64>)
 8000f5a:	f001 fff3 	bl	8002f44 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000f64:	f000 f822 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000074 	.word	0x20000074
 8000f74:	40001400 	.word	0x40001400

08000f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <MX_GPIO_Init+0x30>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a08      	ldr	r2, [pc, #32]	@ (8000fa8 <MX_GPIO_Init+0x30>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <MX_GPIO_Init+0x30>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <Error_Handler+0x8>

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <HAL_MspInit+0x4c>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	@ (8001004 <HAL_MspInit+0x4c>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fce:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <HAL_MspInit+0x4c>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <HAL_MspInit+0x4c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	4a08      	ldr	r2, [pc, #32]	@ (8001004 <HAL_MspInit+0x4c>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_MspInit+0x4c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800

08001008 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	@ 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a1b      	ldr	r2, [pc, #108]	@ (8001094 <HAL_ADC_MspInit+0x8c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d12f      	bne.n	800108a <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b1a      	ldr	r3, [pc, #104]	@ (8001098 <HAL_ADC_MspInit+0x90>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	4a19      	ldr	r2, [pc, #100]	@ (8001098 <HAL_ADC_MspInit+0x90>)
 8001034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001038:	6453      	str	r3, [r2, #68]	@ 0x44
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <HAL_ADC_MspInit+0x90>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <HAL_ADC_MspInit+0x90>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a12      	ldr	r2, [pc, #72]	@ (8001098 <HAL_ADC_MspInit+0x90>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <HAL_ADC_MspInit+0x90>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001062:	2301      	movs	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001066:	2303      	movs	r3, #3
 8001068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	4809      	ldr	r0, [pc, #36]	@ (800109c <HAL_ADC_MspInit+0x94>)
 8001076:	f000 ff27 	bl	8001ec8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2012      	movs	r0, #18
 8001080:	f000 feeb 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001084:	2012      	movs	r0, #18
 8001086:	f000 ff04 	bl	8001e92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	@ 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40012000 	.word	0x40012000
 8001098:	40023800 	.word	0x40023800
 800109c:	40020000 	.word	0x40020000

080010a0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0e      	ldr	r2, [pc, #56]	@ (80010e8 <HAL_TIM_Base_MspInit+0x48>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d115      	bne.n	80010de <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b0d      	ldr	r3, [pc, #52]	@ (80010ec <HAL_TIM_Base_MspInit+0x4c>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	4a0c      	ldr	r2, [pc, #48]	@ (80010ec <HAL_TIM_Base_MspInit+0x4c>)
 80010bc:	f043 0320 	orr.w	r3, r3, #32
 80010c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c2:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <HAL_TIM_Base_MspInit+0x4c>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	f003 0320 	and.w	r3, r3, #32
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2037      	movs	r0, #55	@ 0x37
 80010d4:	f000 fec1 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80010d8:	2037      	movs	r0, #55	@ 0x37
 80010da:	f000 feda 	bl	8001e92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40001400 	.word	0x40001400
 80010ec:	40023800 	.word	0x40023800

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <NMI_Handler+0x4>

080010f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <MemManage_Handler+0x4>

08001108 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <UsageFault_Handler+0x4>

08001118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001146:	f000 f8b1 	bl	80012ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001156:	4806      	ldr	r0, [pc, #24]	@ (8001170 <ADC_IRQHandler+0x20>)
 8001158:	f000 f9ea 	bl	8001530 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  uint32_t value = HAL_ADC_GetValue(&hadc1);
 800115c:	4804      	ldr	r0, [pc, #16]	@ (8001170 <ADC_IRQHandler+0x20>)
 800115e:	f000 faf7 	bl	8001750 <HAL_ADC_GetValue>
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t sicaklik = (value) * (uint32_t)(5000 / 4096);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	603b      	str	r3, [r7, #0]
  /* USER CODE END ADC_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000002c 	.word	0x2000002c

08001174 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001178:	4803      	ldr	r0, [pc, #12]	@ (8001188 <TIM7_IRQHandler+0x14>)
 800117a:	f001 fd25 	bl	8002bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  HAL_ADC_Start_IT(&hadc1);
 800117e:	4803      	ldr	r0, [pc, #12]	@ (800118c <TIM7_IRQHandler+0x18>)
 8001180:	f000 f8f8 	bl	8001374 <HAL_ADC_Start_IT>

  /* USER CODE END TIM7_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000074 	.word	0x20000074
 800118c:	2000002c 	.word	0x2000002c

08001190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <SystemInit+0x20>)
 8001196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800119a:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <SystemInit+0x20>)
 800119c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011b8:	f7ff ffea 	bl	8001190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011be:	490d      	ldr	r1, [pc, #52]	@ (80011f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c0:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001200 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011e2:	f001 ff47 	bl	8003074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e6:	f7ff fda9 	bl	8000d3c <main>
  bx  lr    
 80011ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011f8:	080030f4 	.word	0x080030f4
  ldr r2, =_sbss
 80011fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001200:	200000cc 	.word	0x200000cc

08001204 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <CAN1_RX0_IRQHandler>
	...

08001208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800120c:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0d      	ldr	r2, [pc, #52]	@ (8001248 <HAL_Init+0x40>)
 8001212:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001216:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001218:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <HAL_Init+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <HAL_Init+0x40>)
 800121e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001222:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001224:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <HAL_Init+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a07      	ldr	r2, [pc, #28]	@ (8001248 <HAL_Init+0x40>)
 800122a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800122e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001230:	2003      	movs	r0, #3
 8001232:	f000 fe07 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001236:	200f      	movs	r0, #15
 8001238:	f000 f808 	bl	800124c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800123c:	f7ff febc 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023c00 	.word	0x40023c00

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <HAL_InitTick+0x54>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_InitTick+0x58>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001262:	fbb3 f3f1 	udiv	r3, r3, r1
 8001266:	fbb2 f3f3 	udiv	r3, r2, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fe1f 	bl	8001eae <HAL_SYSTICK_Config>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e00e      	b.n	8001298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b0f      	cmp	r3, #15
 800127e:	d80a      	bhi.n	8001296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001280:	2200      	movs	r2, #0
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001288:	f000 fde7 	bl	8001e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800128c:	4a06      	ldr	r2, [pc, #24]	@ (80012a8 <HAL_InitTick+0x5c>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	e000      	b.n	8001298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000000 	.word	0x20000000
 80012a4:	20000008 	.word	0x20000008
 80012a8:	20000004 	.word	0x20000004

080012ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <HAL_IncTick+0x20>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_IncTick+0x24>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <HAL_IncTick+0x24>)
 80012be:	6013      	str	r3, [r2, #0]
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000008 	.word	0x20000008
 80012d0:	200000c8 	.word	0x200000c8

080012d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b03      	ldr	r3, [pc, #12]	@ (80012e8 <HAL_GetTick+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	200000c8 	.word	0x200000c8

080012ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e033      	b.n	800136a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	2b00      	cmp	r3, #0
 8001308:	d109      	bne.n	800131e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fe7c 	bl	8001008 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	2b00      	cmp	r3, #0
 8001328:	d118      	bne.n	800135c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001332:	f023 0302 	bic.w	r3, r3, #2
 8001336:	f043 0202 	orr.w	r2, r3, #2
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 fbaa 	bl	8001a98 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	f023 0303 	bic.w	r3, r3, #3
 8001352:	f043 0201 	orr.w	r2, r3, #1
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	@ 0x40
 800135a:	e001      	b.n	8001360 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001368:	7bfb      	ldrb	r3, [r7, #15]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <HAL_ADC_Start_IT+0x1a>
 800138a:	2302      	movs	r3, #2
 800138c:	e0bd      	b.n	800150a <HAL_ADC_Start_IT+0x196>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d018      	beq.n	80013d6 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0201 	orr.w	r2, r2, #1
 80013b2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013b4:	4b58      	ldr	r3, [pc, #352]	@ (8001518 <HAL_ADC_Start_IT+0x1a4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a58      	ldr	r2, [pc, #352]	@ (800151c <HAL_ADC_Start_IT+0x1a8>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	0c9a      	lsrs	r2, r3, #18
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80013c8:	e002      	b.n	80013d0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f9      	bne.n	80013ca <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	f040 8085 	bne.w	80014f0 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80013ee:	f023 0301 	bic.w	r3, r3, #1
 80013f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001404:	2b00      	cmp	r3, #0
 8001406:	d007      	beq.n	8001418 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001410:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001424:	d106      	bne.n	8001434 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	f023 0206 	bic.w	r2, r3, #6
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	645a      	str	r2, [r3, #68]	@ 0x44
 8001432:	e002      	b.n	800143a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001442:	4b37      	ldr	r3, [pc, #220]	@ (8001520 <HAL_ADC_Start_IT+0x1ac>)
 8001444:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800144e:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800145e:	f043 0320 	orr.w	r3, r3, #32
 8001462:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 031f 	and.w	r3, r3, #31
 800146c:	2b00      	cmp	r3, #0
 800146e:	d12a      	bne.n	80014c6 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a2b      	ldr	r2, [pc, #172]	@ (8001524 <HAL_ADC_Start_IT+0x1b0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d015      	beq.n	80014a6 <HAL_ADC_Start_IT+0x132>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a2a      	ldr	r2, [pc, #168]	@ (8001528 <HAL_ADC_Start_IT+0x1b4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d105      	bne.n	8001490 <HAL_ADC_Start_IT+0x11c>
 8001484:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <HAL_ADC_Start_IT+0x1ac>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 031f 	and.w	r3, r3, #31
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00a      	beq.n	80014a6 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a25      	ldr	r2, [pc, #148]	@ (800152c <HAL_ADC_Start_IT+0x1b8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d136      	bne.n	8001508 <HAL_ADC_Start_IT+0x194>
 800149a:	4b21      	ldr	r3, [pc, #132]	@ (8001520 <HAL_ADC_Start_IT+0x1ac>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d130      	bne.n	8001508 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d129      	bne.n	8001508 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	e020      	b.n	8001508 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a16      	ldr	r2, [pc, #88]	@ (8001524 <HAL_ADC_Start_IT+0x1b0>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d11b      	bne.n	8001508 <HAL_ADC_Start_IT+0x194>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d114      	bne.n	8001508 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	e00b      	b.n	8001508 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f4:	f043 0210 	orr.w	r2, r3, #16
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001500:	f043 0201 	orr.w	r2, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000000 	.word	0x20000000
 800151c:	431bde83 	.word	0x431bde83
 8001520:	40012300 	.word	0x40012300
 8001524:	40012000 	.word	0x40012000
 8001528:	40012100 	.word	0x40012100
 800152c:	40012200 	.word	0x40012200

08001530 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f003 0320 	and.w	r3, r3, #32
 800155e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d049      	beq.n	80015fa <HAL_ADC_IRQHandler+0xca>
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d046      	beq.n	80015fa <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001570:	f003 0310 	and.w	r3, r3, #16
 8001574:	2b00      	cmp	r3, #0
 8001576:	d105      	bne.n	8001584 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d12b      	bne.n	80015ea <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001596:	2b00      	cmp	r3, #0
 8001598:	d127      	bne.n	80015ea <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d006      	beq.n	80015b6 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d119      	bne.n	80015ea <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0220 	bic.w	r2, r2, #32
 80015c4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d105      	bne.n	80015ea <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	f043 0201 	orr.w	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff fb50 	bl	8000c90 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f06f 0212 	mvn.w	r2, #18
 80015f8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001608:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d057      	beq.n	80016c0 <HAL_ADC_IRQHandler+0x190>
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d054      	beq.n	80016c0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	2b00      	cmp	r3, #0
 8001620:	d105      	bne.n	800162e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d139      	bne.n	80016b0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001642:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001646:	2b00      	cmp	r3, #0
 8001648:	d006      	beq.n	8001658 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001654:	2b00      	cmp	r3, #0
 8001656:	d12b      	bne.n	80016b0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001662:	2b00      	cmp	r3, #0
 8001664:	d124      	bne.n	80016b0 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001670:	2b00      	cmp	r3, #0
 8001672:	d11d      	bne.n	80016b0 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001678:	2b00      	cmp	r3, #0
 800167a:	d119      	bne.n	80016b0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800168a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001690:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d105      	bne.n	80016b0 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a8:	f043 0201 	orr.w	r2, r3, #1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 faed 	bl	8001c90 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f06f 020c 	mvn.w	r2, #12
 80016be:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ce:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d017      	beq.n	8001706 <HAL_ADC_IRQHandler+0x1d6>
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d014      	beq.n	8001706 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d10d      	bne.n	8001706 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f837 	bl	800176a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f06f 0201 	mvn.w	r2, #1
 8001704:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f003 0320 	and.w	r3, r3, #32
 800170c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001714:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d015      	beq.n	8001748 <HAL_ADC_IRQHandler+0x218>
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d012      	beq.n	8001748 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	f043 0202 	orr.w	r2, r3, #2
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f06f 0220 	mvn.w	r2, #32
 8001736:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f820 	bl	800177e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f06f 0220 	mvn.w	r2, #32
 8001746:	601a      	str	r2, [r3, #0]
  }
}
 8001748:	bf00      	nop
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d101      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x1c>
 80017ac:	2302      	movs	r3, #2
 80017ae:	e105      	b.n	80019bc <HAL_ADC_ConfigChannel+0x228>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b09      	cmp	r3, #9
 80017be:	d925      	bls.n	800180c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68d9      	ldr	r1, [r3, #12]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	461a      	mov	r2, r3
 80017ce:	4613      	mov	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	3b1e      	subs	r3, #30
 80017d6:	2207      	movs	r2, #7
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43da      	mvns	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	400a      	ands	r2, r1
 80017e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68d9      	ldr	r1, [r3, #12]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	4603      	mov	r3, r0
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4403      	add	r3, r0
 80017fe:	3b1e      	subs	r3, #30
 8001800:	409a      	lsls	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	e022      	b.n	8001852 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6919      	ldr	r1, [r3, #16]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	b29b      	uxth	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	2207      	movs	r2, #7
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	400a      	ands	r2, r1
 800182e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6919      	ldr	r1, [r3, #16]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	b29b      	uxth	r3, r3
 8001840:	4618      	mov	r0, r3
 8001842:	4603      	mov	r3, r0
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4403      	add	r3, r0
 8001848:	409a      	lsls	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b06      	cmp	r3, #6
 8001858:	d824      	bhi.n	80018a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	3b05      	subs	r3, #5
 800186c:	221f      	movs	r2, #31
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	400a      	ands	r2, r1
 800187a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	b29b      	uxth	r3, r3
 8001888:	4618      	mov	r0, r3
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	3b05      	subs	r3, #5
 8001896:	fa00 f203 	lsl.w	r2, r0, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80018a2:	e04c      	b.n	800193e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b0c      	cmp	r3, #12
 80018aa:	d824      	bhi.n	80018f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	3b23      	subs	r3, #35	@ 0x23
 80018be:	221f      	movs	r2, #31
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43da      	mvns	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	400a      	ands	r2, r1
 80018cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	3b23      	subs	r3, #35	@ 0x23
 80018e8:	fa00 f203 	lsl.w	r2, r0, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80018f4:	e023      	b.n	800193e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	3b41      	subs	r3, #65	@ 0x41
 8001908:	221f      	movs	r2, #31
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	400a      	ands	r2, r1
 8001916:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	b29b      	uxth	r3, r3
 8001924:	4618      	mov	r0, r3
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	3b41      	subs	r3, #65	@ 0x41
 8001932:	fa00 f203 	lsl.w	r2, r0, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800193e:	4b22      	ldr	r3, [pc, #136]	@ (80019c8 <HAL_ADC_ConfigChannel+0x234>)
 8001940:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a21      	ldr	r2, [pc, #132]	@ (80019cc <HAL_ADC_ConfigChannel+0x238>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d109      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x1cc>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b12      	cmp	r3, #18
 8001952:	d105      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a19      	ldr	r2, [pc, #100]	@ (80019cc <HAL_ADC_ConfigChannel+0x238>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d123      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x21e>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b10      	cmp	r3, #16
 8001970:	d003      	beq.n	800197a <HAL_ADC_ConfigChannel+0x1e6>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b11      	cmp	r3, #17
 8001978:	d11b      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b10      	cmp	r3, #16
 800198c:	d111      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <HAL_ADC_ConfigChannel+0x23c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a10      	ldr	r2, [pc, #64]	@ (80019d4 <HAL_ADC_ConfigChannel+0x240>)
 8001994:	fba2 2303 	umull	r2, r3, r2, r3
 8001998:	0c9a      	lsrs	r2, r3, #18
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019a4:	e002      	b.n	80019ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f9      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40012300 	.word	0x40012300
 80019cc:	40012000 	.word	0x40012000
 80019d0:	20000000 	.word	0x20000000
 80019d4:	431bde83 	.word	0x431bde83

080019d8 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */

  /* Process locked */
  __HAL_LOCK(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_ADC_AnalogWDGConfig+0x18>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e04d      	b.n	8001a8c <HAL_ADC_AnalogWDGConfig+0xb4>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (AnalogWDGConfig->ITMode == ENABLE)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	7c1b      	ldrb	r3, [r3, #16]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d108      	bne.n	8001a12 <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	e007      	b.n	8001a22 <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a20:	605a      	str	r2, [r3, #4]
  }

  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001a34:	6053      	str	r3, [r2, #4]

  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6859      	ldr	r1, [r3, #4]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	605a      	str	r2, [r3, #4]

  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	6852      	ldr	r2, [r2, #4]
 8001a50:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	6892      	ldr	r2, [r2, #8]
 8001a5a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 021f 	bic.w	r2, r2, #31
 8001a6a:	605a      	str	r2, [r3, #4]

  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4619      	mov	r1, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aa0:	4b79      	ldr	r3, [pc, #484]	@ (8001c88 <ADC_Init+0x1f0>)
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001acc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	021a      	lsls	r2, r3, #8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001af0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6899      	ldr	r1, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2a:	4a58      	ldr	r2, [pc, #352]	@ (8001c8c <ADC_Init+0x1f4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d022      	beq.n	8001b76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6899      	ldr	r1, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6899      	ldr	r1, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	e00f      	b.n	8001b96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b94:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0202 	bic.w	r2, r2, #2
 8001ba4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6899      	ldr	r1, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	7e1b      	ldrb	r3, [r3, #24]
 8001bb0:	005a      	lsls	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01b      	beq.n	8001bfc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bd2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001be2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6859      	ldr	r1, [r3, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	035a      	lsls	r2, r3, #13
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	e007      	b.n	8001c0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c0a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	051a      	lsls	r2, r3, #20
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6899      	ldr	r1, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c4e:	025a      	lsls	r2, r3, #9
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6899      	ldr	r1, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	029a      	lsls	r2, r3, #10
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	609a      	str	r2, [r3, #8]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	40012300 	.word	0x40012300
 8001c8c:	0f000001 	.word	0x0f000001

08001c90 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ccc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	@ (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db0b      	blt.n	8001d32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4907      	ldr	r1, [pc, #28]	@ (8001d40 <__NVIC_EnableIRQ+0x38>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000e100 	.word	0xe000e100

08001d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	db0a      	blt.n	8001d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	490c      	ldr	r1, [pc, #48]	@ (8001d90 <__NVIC_SetPriority+0x4c>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d6c:	e00a      	b.n	8001d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4908      	ldr	r1, [pc, #32]	@ (8001d94 <__NVIC_SetPriority+0x50>)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	440b      	add	r3, r1
 8001d82:	761a      	strb	r2, [r3, #24]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000e100 	.word	0xe000e100
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	@ 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f1c3 0307 	rsb	r3, r3, #7
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	bf28      	it	cs
 8001db6:	2304      	movcs	r3, #4
 8001db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d902      	bls.n	8001dc8 <NVIC_EncodePriority+0x30>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b03      	subs	r3, #3
 8001dc6:	e000      	b.n	8001dca <NVIC_EncodePriority+0x32>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	401a      	ands	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	4313      	orrs	r3, r2
         );
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	@ 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e24:	f7ff ff8e 	bl	8001d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff29 	bl	8001ca4 <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff3e 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff8e 	bl	8001d98 <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5d 	bl	8001d44 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff31 	bl	8001d08 <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa2 	bl	8001e00 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	@ 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	e16b      	b.n	80021bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	f040 815a 	bne.w	80021b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d005      	beq.n	8001f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d130      	bne.n	8001f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	2203      	movs	r2, #3
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f50:	2201      	movs	r2, #1
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 0201 	and.w	r2, r3, #1
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d017      	beq.n	8001fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d123      	bne.n	800200c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	08da      	lsrs	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3208      	adds	r2, #8
 8001fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	220f      	movs	r2, #15
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	08da      	lsrs	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3208      	adds	r2, #8
 8002006:	69b9      	ldr	r1, [r7, #24]
 8002008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	2203      	movs	r2, #3
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0203 	and.w	r2, r3, #3
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80b4 	beq.w	80021b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b60      	ldr	r3, [pc, #384]	@ (80021d4 <HAL_GPIO_Init+0x30c>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002056:	4a5f      	ldr	r2, [pc, #380]	@ (80021d4 <HAL_GPIO_Init+0x30c>)
 8002058:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800205c:	6453      	str	r3, [r2, #68]	@ 0x44
 800205e:	4b5d      	ldr	r3, [pc, #372]	@ (80021d4 <HAL_GPIO_Init+0x30c>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002062:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206a:	4a5b      	ldr	r2, [pc, #364]	@ (80021d8 <HAL_GPIO_Init+0x310>)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	220f      	movs	r2, #15
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a52      	ldr	r2, [pc, #328]	@ (80021dc <HAL_GPIO_Init+0x314>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d02b      	beq.n	80020ee <HAL_GPIO_Init+0x226>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a51      	ldr	r2, [pc, #324]	@ (80021e0 <HAL_GPIO_Init+0x318>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d025      	beq.n	80020ea <HAL_GPIO_Init+0x222>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a50      	ldr	r2, [pc, #320]	@ (80021e4 <HAL_GPIO_Init+0x31c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01f      	beq.n	80020e6 <HAL_GPIO_Init+0x21e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4f      	ldr	r2, [pc, #316]	@ (80021e8 <HAL_GPIO_Init+0x320>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d019      	beq.n	80020e2 <HAL_GPIO_Init+0x21a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4e      	ldr	r2, [pc, #312]	@ (80021ec <HAL_GPIO_Init+0x324>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_GPIO_Init+0x216>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4d      	ldr	r2, [pc, #308]	@ (80021f0 <HAL_GPIO_Init+0x328>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00d      	beq.n	80020da <HAL_GPIO_Init+0x212>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4c      	ldr	r2, [pc, #304]	@ (80021f4 <HAL_GPIO_Init+0x32c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d007      	beq.n	80020d6 <HAL_GPIO_Init+0x20e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4b      	ldr	r2, [pc, #300]	@ (80021f8 <HAL_GPIO_Init+0x330>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d101      	bne.n	80020d2 <HAL_GPIO_Init+0x20a>
 80020ce:	2307      	movs	r3, #7
 80020d0:	e00e      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020d2:	2308      	movs	r3, #8
 80020d4:	e00c      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020d6:	2306      	movs	r3, #6
 80020d8:	e00a      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020da:	2305      	movs	r3, #5
 80020dc:	e008      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020de:	2304      	movs	r3, #4
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020e2:	2303      	movs	r3, #3
 80020e4:	e004      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e002      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020ee:	2300      	movs	r3, #0
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	f002 0203 	and.w	r2, r2, #3
 80020f6:	0092      	lsls	r2, r2, #2
 80020f8:	4093      	lsls	r3, r2
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002100:	4935      	ldr	r1, [pc, #212]	@ (80021d8 <HAL_GPIO_Init+0x310>)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	3302      	adds	r3, #2
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800210e:	4b3b      	ldr	r3, [pc, #236]	@ (80021fc <HAL_GPIO_Init+0x334>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002132:	4a32      	ldr	r2, [pc, #200]	@ (80021fc <HAL_GPIO_Init+0x334>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002138:	4b30      	ldr	r3, [pc, #192]	@ (80021fc <HAL_GPIO_Init+0x334>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800215c:	4a27      	ldr	r2, [pc, #156]	@ (80021fc <HAL_GPIO_Init+0x334>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002162:	4b26      	ldr	r3, [pc, #152]	@ (80021fc <HAL_GPIO_Init+0x334>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002186:	4a1d      	ldr	r2, [pc, #116]	@ (80021fc <HAL_GPIO_Init+0x334>)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800218c:	4b1b      	ldr	r3, [pc, #108]	@ (80021fc <HAL_GPIO_Init+0x334>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021b0:	4a12      	ldr	r2, [pc, #72]	@ (80021fc <HAL_GPIO_Init+0x334>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3301      	adds	r3, #1
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	2b0f      	cmp	r3, #15
 80021c0:	f67f ae90 	bls.w	8001ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3724      	adds	r7, #36	@ 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40013800 	.word	0x40013800
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020800 	.word	0x40020800
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40021400 	.word	0x40021400
 80021f4:	40021800 	.word	0x40021800
 80021f8:	40021c00 	.word	0x40021c00
 80021fc:	40013c00 	.word	0x40013c00

08002200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e267      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d075      	beq.n	800230a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800221e:	4b88      	ldr	r3, [pc, #544]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b04      	cmp	r3, #4
 8002228:	d00c      	beq.n	8002244 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800222a:	4b85      	ldr	r3, [pc, #532]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002232:	2b08      	cmp	r3, #8
 8002234:	d112      	bne.n	800225c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002236:	4b82      	ldr	r3, [pc, #520]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800223e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002242:	d10b      	bne.n	800225c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	4b7e      	ldr	r3, [pc, #504]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d05b      	beq.n	8002308 <HAL_RCC_OscConfig+0x108>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d157      	bne.n	8002308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e242      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002264:	d106      	bne.n	8002274 <HAL_RCC_OscConfig+0x74>
 8002266:	4b76      	ldr	r3, [pc, #472]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a75      	ldr	r2, [pc, #468]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e01d      	b.n	80022b0 <HAL_RCC_OscConfig+0xb0>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x98>
 800227e:	4b70      	ldr	r3, [pc, #448]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a6f      	ldr	r2, [pc, #444]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b6d      	ldr	r3, [pc, #436]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a6c      	ldr	r2, [pc, #432]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e00b      	b.n	80022b0 <HAL_RCC_OscConfig+0xb0>
 8002298:	4b69      	ldr	r3, [pc, #420]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a68      	ldr	r2, [pc, #416]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800229e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b66      	ldr	r3, [pc, #408]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a65      	ldr	r2, [pc, #404]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 80022aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d013      	beq.n	80022e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff f80c 	bl	80012d4 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7ff f808 	bl	80012d4 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	@ 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e207      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0xc0>
 80022de:	e014      	b.n	800230a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7fe fff8 	bl	80012d4 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7fe fff4 	bl	80012d4 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	@ 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e1f3      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fa:	4b51      	ldr	r3, [pc, #324]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0xe8>
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d063      	beq.n	80023de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002316:	4b4a      	ldr	r3, [pc, #296]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00b      	beq.n	800233a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002322:	4b47      	ldr	r3, [pc, #284]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800232a:	2b08      	cmp	r3, #8
 800232c:	d11c      	bne.n	8002368 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800232e:	4b44      	ldr	r3, [pc, #272]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d116      	bne.n	8002368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233a:	4b41      	ldr	r3, [pc, #260]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_RCC_OscConfig+0x152>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e1c7      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002352:	4b3b      	ldr	r3, [pc, #236]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4937      	ldr	r1, [pc, #220]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002366:	e03a      	b.n	80023de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002370:	4b34      	ldr	r3, [pc, #208]	@ (8002444 <HAL_RCC_OscConfig+0x244>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002376:	f7fe ffad 	bl	80012d4 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237e:	f7fe ffa9 	bl	80012d4 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e1a8      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002390:	4b2b      	ldr	r3, [pc, #172]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239c:	4b28      	ldr	r3, [pc, #160]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4925      	ldr	r1, [pc, #148]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]
 80023b0:	e015      	b.n	80023de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b2:	4b24      	ldr	r3, [pc, #144]	@ (8002444 <HAL_RCC_OscConfig+0x244>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe ff8c 	bl	80012d4 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c0:	f7fe ff88 	bl	80012d4 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e187      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d036      	beq.n	8002458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d016      	beq.n	8002420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f2:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <HAL_RCC_OscConfig+0x248>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f8:	f7fe ff6c 	bl	80012d4 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002400:	f7fe ff68 	bl	80012d4 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e167      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002412:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <HAL_RCC_OscConfig+0x240>)
 8002414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x200>
 800241e:	e01b      	b.n	8002458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002420:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <HAL_RCC_OscConfig+0x248>)
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002426:	f7fe ff55 	bl	80012d4 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242c:	e00e      	b.n	800244c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242e:	f7fe ff51 	bl	80012d4 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d907      	bls.n	800244c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e150      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
 8002440:	40023800 	.word	0x40023800
 8002444:	42470000 	.word	0x42470000
 8002448:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	4b88      	ldr	r3, [pc, #544]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800244e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1ea      	bne.n	800242e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8097 	beq.w	8002594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246a:	4b81      	ldr	r3, [pc, #516]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10f      	bne.n	8002496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	4b7d      	ldr	r3, [pc, #500]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	4a7c      	ldr	r2, [pc, #496]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002484:	6413      	str	r3, [r2, #64]	@ 0x40
 8002486:	4b7a      	ldr	r3, [pc, #488]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002492:	2301      	movs	r3, #1
 8002494:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002496:	4b77      	ldr	r3, [pc, #476]	@ (8002674 <HAL_RCC_OscConfig+0x474>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d118      	bne.n	80024d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a2:	4b74      	ldr	r3, [pc, #464]	@ (8002674 <HAL_RCC_OscConfig+0x474>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a73      	ldr	r2, [pc, #460]	@ (8002674 <HAL_RCC_OscConfig+0x474>)
 80024a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ae:	f7fe ff11 	bl	80012d4 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b6:	f7fe ff0d 	bl	80012d4 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e10c      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002674 <HAL_RCC_OscConfig+0x474>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x2ea>
 80024dc:	4b64      	ldr	r3, [pc, #400]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e0:	4a63      	ldr	r2, [pc, #396]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024e8:	e01c      	b.n	8002524 <HAL_RCC_OscConfig+0x324>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x30c>
 80024f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 80024f8:	f043 0304 	orr.w	r3, r3, #4
 80024fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80024fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002502:	4a5b      	ldr	r2, [pc, #364]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6713      	str	r3, [r2, #112]	@ 0x70
 800250a:	e00b      	b.n	8002524 <HAL_RCC_OscConfig+0x324>
 800250c:	4b58      	ldr	r3, [pc, #352]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002510:	4a57      	ldr	r2, [pc, #348]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	6713      	str	r3, [r2, #112]	@ 0x70
 8002518:	4b55      	ldr	r3, [pc, #340]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251c:	4a54      	ldr	r2, [pc, #336]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800251e:	f023 0304 	bic.w	r3, r3, #4
 8002522:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d015      	beq.n	8002558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7fe fed2 	bl	80012d4 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002532:	e00a      	b.n	800254a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	f7fe fece 	bl	80012d4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e0cb      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254a:	4b49      	ldr	r3, [pc, #292]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0ee      	beq.n	8002534 <HAL_RCC_OscConfig+0x334>
 8002556:	e014      	b.n	8002582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002558:	f7fe febc 	bl	80012d4 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255e:	e00a      	b.n	8002576 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002560:	f7fe feb8 	bl	80012d4 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e0b5      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002576:	4b3e      	ldr	r3, [pc, #248]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1ee      	bne.n	8002560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002582:	7dfb      	ldrb	r3, [r7, #23]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002588:	4b39      	ldr	r3, [pc, #228]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	4a38      	ldr	r2, [pc, #224]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800258e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002592:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80a1 	beq.w	80026e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800259e:	4b34      	ldr	r3, [pc, #208]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d05c      	beq.n	8002664 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d141      	bne.n	8002636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b2:	4b31      	ldr	r3, [pc, #196]	@ (8002678 <HAL_RCC_OscConfig+0x478>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7fe fe8c 	bl	80012d4 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c0:	f7fe fe88 	bl	80012d4 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e087      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d2:	4b27      	ldr	r3, [pc, #156]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	019b      	lsls	r3, r3, #6
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f4:	085b      	lsrs	r3, r3, #1
 80025f6:	3b01      	subs	r3, #1
 80025f8:	041b      	lsls	r3, r3, #16
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	491b      	ldr	r1, [pc, #108]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002608:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <HAL_RCC_OscConfig+0x478>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7fe fe61 	bl	80012d4 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002616:	f7fe fe5d 	bl	80012d4 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e05c      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002628:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x416>
 8002634:	e054      	b.n	80026e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002636:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <HAL_RCC_OscConfig+0x478>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7fe fe4a 	bl	80012d4 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002644:	f7fe fe46 	bl	80012d4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e045      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002656:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <HAL_RCC_OscConfig+0x470>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x444>
 8002662:	e03d      	b.n	80026e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d107      	bne.n	800267c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e038      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
 8002670:	40023800 	.word	0x40023800
 8002674:	40007000 	.word	0x40007000
 8002678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800267c:	4b1b      	ldr	r3, [pc, #108]	@ (80026ec <HAL_RCC_OscConfig+0x4ec>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d028      	beq.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d121      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d11a      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026ac:	4013      	ands	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d111      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c2:	085b      	lsrs	r3, r3, #1
 80026c4:	3b01      	subs	r3, #1
 80026c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d107      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800

080026f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0cc      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002704:	4b68      	ldr	r3, [pc, #416]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d90c      	bls.n	800272c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b65      	ldr	r3, [pc, #404]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b63      	ldr	r3, [pc, #396]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0b8      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d020      	beq.n	800277a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002744:	4b59      	ldr	r3, [pc, #356]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a58      	ldr	r2, [pc, #352]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800274e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800275c:	4b53      	ldr	r3, [pc, #332]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4a52      	ldr	r2, [pc, #328]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002768:	4b50      	ldr	r3, [pc, #320]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	494d      	ldr	r1, [pc, #308]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d044      	beq.n	8002810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	4b47      	ldr	r3, [pc, #284]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d119      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e07f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ae:	4b3f      	ldr	r3, [pc, #252]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e06f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027be:	4b3b      	ldr	r3, [pc, #236]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e067      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ce:	4b37      	ldr	r3, [pc, #220]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f023 0203 	bic.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4934      	ldr	r1, [pc, #208]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e0:	f7fe fd78 	bl	80012d4 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e8:	f7fe fd74 	bl	80012d4 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e04f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	4b2b      	ldr	r3, [pc, #172]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 020c 	and.w	r2, r3, #12
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	429a      	cmp	r2, r3
 800280e:	d1eb      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002810:	4b25      	ldr	r3, [pc, #148]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d20c      	bcs.n	8002838 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b22      	ldr	r3, [pc, #136]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b20      	ldr	r3, [pc, #128]	@ (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e032      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002844:	4b19      	ldr	r3, [pc, #100]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4916      	ldr	r1, [pc, #88]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002862:	4b12      	ldr	r3, [pc, #72]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	490e      	ldr	r1, [pc, #56]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002876:	f000 f821 	bl	80028bc <HAL_RCC_GetSysClockFreq>
 800287a:	4602      	mov	r2, r0
 800287c:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	490a      	ldr	r1, [pc, #40]	@ (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	5ccb      	ldrb	r3, [r1, r3]
 800288a:	fa22 f303 	lsr.w	r3, r2, r3
 800288e:	4a09      	ldr	r2, [pc, #36]	@ (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002892:	4b09      	ldr	r3, [pc, #36]	@ (80028b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fcd8 	bl	800124c <HAL_InitTick>

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023c00 	.word	0x40023c00
 80028ac:	40023800 	.word	0x40023800
 80028b0:	080030d4 	.word	0x080030d4
 80028b4:	20000000 	.word	0x20000000
 80028b8:	20000004 	.word	0x20000004

080028bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c0:	b090      	sub	sp, #64	@ 0x40
 80028c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028d4:	4b59      	ldr	r3, [pc, #356]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d00d      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x40>
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	f200 80a1 	bhi.w	8002a28 <HAL_RCC_GetSysClockFreq+0x16c>
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x34>
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d003      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ee:	e09b      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028f0:	4b53      	ldr	r3, [pc, #332]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x184>)
 80028f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028f4:	e09b      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028f6:	4b53      	ldr	r3, [pc, #332]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x188>)
 80028f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028fa:	e098      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028fc:	4b4f      	ldr	r3, [pc, #316]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002904:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002906:	4b4d      	ldr	r3, [pc, #308]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d028      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002912:	4b4a      	ldr	r3, [pc, #296]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	099b      	lsrs	r3, r3, #6
 8002918:	2200      	movs	r2, #0
 800291a:	623b      	str	r3, [r7, #32]
 800291c:	627a      	str	r2, [r7, #36]	@ 0x24
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002924:	2100      	movs	r1, #0
 8002926:	4b47      	ldr	r3, [pc, #284]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002928:	fb03 f201 	mul.w	r2, r3, r1
 800292c:	2300      	movs	r3, #0
 800292e:	fb00 f303 	mul.w	r3, r0, r3
 8002932:	4413      	add	r3, r2
 8002934:	4a43      	ldr	r2, [pc, #268]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002936:	fba0 1202 	umull	r1, r2, r0, r2
 800293a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800293c:	460a      	mov	r2, r1
 800293e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002942:	4413      	add	r3, r2
 8002944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002948:	2200      	movs	r2, #0
 800294a:	61bb      	str	r3, [r7, #24]
 800294c:	61fa      	str	r2, [r7, #28]
 800294e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002952:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002956:	f7fe f805 	bl	8000964 <__aeabi_uldivmod>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4613      	mov	r3, r2
 8002960:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002962:	e053      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002964:	4b35      	ldr	r3, [pc, #212]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	099b      	lsrs	r3, r3, #6
 800296a:	2200      	movs	r2, #0
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	617a      	str	r2, [r7, #20]
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002976:	f04f 0b00 	mov.w	fp, #0
 800297a:	4652      	mov	r2, sl
 800297c:	465b      	mov	r3, fp
 800297e:	f04f 0000 	mov.w	r0, #0
 8002982:	f04f 0100 	mov.w	r1, #0
 8002986:	0159      	lsls	r1, r3, #5
 8002988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800298c:	0150      	lsls	r0, r2, #5
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	ebb2 080a 	subs.w	r8, r2, sl
 8002996:	eb63 090b 	sbc.w	r9, r3, fp
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029ae:	ebb2 0408 	subs.w	r4, r2, r8
 80029b2:	eb63 0509 	sbc.w	r5, r3, r9
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	00eb      	lsls	r3, r5, #3
 80029c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029c4:	00e2      	lsls	r2, r4, #3
 80029c6:	4614      	mov	r4, r2
 80029c8:	461d      	mov	r5, r3
 80029ca:	eb14 030a 	adds.w	r3, r4, sl
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	eb45 030b 	adc.w	r3, r5, fp
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029e2:	4629      	mov	r1, r5
 80029e4:	028b      	lsls	r3, r1, #10
 80029e6:	4621      	mov	r1, r4
 80029e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029ec:	4621      	mov	r1, r4
 80029ee:	028a      	lsls	r2, r1, #10
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f6:	2200      	movs	r2, #0
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	60fa      	str	r2, [r7, #12]
 80029fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a00:	f7fd ffb0 	bl	8000964 <__aeabi_uldivmod>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4613      	mov	r3, r2
 8002a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	3301      	adds	r3, #1
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a26:	e002      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3740      	adds	r7, #64	@ 0x40
 8002a34:	46bd      	mov	sp, r7
 8002a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	00f42400 	.word	0x00f42400
 8002a44:	017d7840 	.word	0x017d7840

08002a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e041      	b.n	8002ade <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe fb16 	bl	80010a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3304      	adds	r3, #4
 8002a84:	4619      	mov	r1, r3
 8002a86:	4610      	mov	r0, r2
 8002a88:	f000 f9b6 	bl	8002df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d001      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e04e      	b.n	8002b9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a23      	ldr	r2, [pc, #140]	@ (8002bac <HAL_TIM_Base_Start_IT+0xc4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d022      	beq.n	8002b68 <HAL_TIM_Base_Start_IT+0x80>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b2a:	d01d      	beq.n	8002b68 <HAL_TIM_Base_Start_IT+0x80>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d018      	beq.n	8002b68 <HAL_TIM_Base_Start_IT+0x80>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002bb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d013      	beq.n	8002b68 <HAL_TIM_Base_Start_IT+0x80>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00e      	beq.n	8002b68 <HAL_TIM_Base_Start_IT+0x80>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002bbc <HAL_TIM_Base_Start_IT+0xd4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d009      	beq.n	8002b68 <HAL_TIM_Base_Start_IT+0x80>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a19      	ldr	r2, [pc, #100]	@ (8002bc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d004      	beq.n	8002b68 <HAL_TIM_Base_Start_IT+0x80>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a18      	ldr	r2, [pc, #96]	@ (8002bc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d111      	bne.n	8002b8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b06      	cmp	r3, #6
 8002b78:	d010      	beq.n	8002b9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0201 	orr.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8a:	e007      	b.n	8002b9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40010000 	.word	0x40010000
 8002bb0:	40000400 	.word	0x40000400
 8002bb4:	40000800 	.word	0x40000800
 8002bb8:	40000c00 	.word	0x40000c00
 8002bbc:	40010400 	.word	0x40010400
 8002bc0:	40014000 	.word	0x40014000
 8002bc4:	40001800 	.word	0x40001800

08002bc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d020      	beq.n	8002c2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01b      	beq.n	8002c2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0202 	mvn.w	r2, #2
 8002bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f8d2 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002c18:	e005      	b.n	8002c26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f8c4 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f8d5 	bl	8002dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d020      	beq.n	8002c78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01b      	beq.n	8002c78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0204 	mvn.w	r2, #4
 8002c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f8ac 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002c64:	e005      	b.n	8002c72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f89e 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f8af 	bl	8002dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d020      	beq.n	8002cc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01b      	beq.n	8002cc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0208 	mvn.w	r2, #8
 8002c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2204      	movs	r2, #4
 8002c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f886 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002cb0:	e005      	b.n	8002cbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f878 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f889 	bl	8002dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d020      	beq.n	8002d10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01b      	beq.n	8002d10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0210 	mvn.w	r2, #16
 8002ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f860 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002cfc:	e005      	b.n	8002d0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f852 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f863 	bl	8002dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00c      	beq.n	8002d34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0201 	mvn.w	r2, #1
 8002d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fd fff0 	bl	8000d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00c      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d007      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f97c 	bl	8003050 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00c      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f834 	bl	8002de4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00c      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0220 	mvn.w	r2, #32
 8002d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f94e 	bl	800303c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002da0:	bf00      	nop
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a43      	ldr	r2, [pc, #268]	@ (8002f18 <TIM_Base_SetConfig+0x120>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d013      	beq.n	8002e38 <TIM_Base_SetConfig+0x40>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e16:	d00f      	beq.n	8002e38 <TIM_Base_SetConfig+0x40>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a40      	ldr	r2, [pc, #256]	@ (8002f1c <TIM_Base_SetConfig+0x124>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00b      	beq.n	8002e38 <TIM_Base_SetConfig+0x40>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a3f      	ldr	r2, [pc, #252]	@ (8002f20 <TIM_Base_SetConfig+0x128>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d007      	beq.n	8002e38 <TIM_Base_SetConfig+0x40>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a3e      	ldr	r2, [pc, #248]	@ (8002f24 <TIM_Base_SetConfig+0x12c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d003      	beq.n	8002e38 <TIM_Base_SetConfig+0x40>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a3d      	ldr	r2, [pc, #244]	@ (8002f28 <TIM_Base_SetConfig+0x130>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d108      	bne.n	8002e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a32      	ldr	r2, [pc, #200]	@ (8002f18 <TIM_Base_SetConfig+0x120>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d02b      	beq.n	8002eaa <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e58:	d027      	beq.n	8002eaa <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a2f      	ldr	r2, [pc, #188]	@ (8002f1c <TIM_Base_SetConfig+0x124>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d023      	beq.n	8002eaa <TIM_Base_SetConfig+0xb2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a2e      	ldr	r2, [pc, #184]	@ (8002f20 <TIM_Base_SetConfig+0x128>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d01f      	beq.n	8002eaa <TIM_Base_SetConfig+0xb2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a2d      	ldr	r2, [pc, #180]	@ (8002f24 <TIM_Base_SetConfig+0x12c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01b      	beq.n	8002eaa <TIM_Base_SetConfig+0xb2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a2c      	ldr	r2, [pc, #176]	@ (8002f28 <TIM_Base_SetConfig+0x130>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d017      	beq.n	8002eaa <TIM_Base_SetConfig+0xb2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f2c <TIM_Base_SetConfig+0x134>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d013      	beq.n	8002eaa <TIM_Base_SetConfig+0xb2>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a2a      	ldr	r2, [pc, #168]	@ (8002f30 <TIM_Base_SetConfig+0x138>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00f      	beq.n	8002eaa <TIM_Base_SetConfig+0xb2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a29      	ldr	r2, [pc, #164]	@ (8002f34 <TIM_Base_SetConfig+0x13c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00b      	beq.n	8002eaa <TIM_Base_SetConfig+0xb2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a28      	ldr	r2, [pc, #160]	@ (8002f38 <TIM_Base_SetConfig+0x140>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d007      	beq.n	8002eaa <TIM_Base_SetConfig+0xb2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a27      	ldr	r2, [pc, #156]	@ (8002f3c <TIM_Base_SetConfig+0x144>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d003      	beq.n	8002eaa <TIM_Base_SetConfig+0xb2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a26      	ldr	r2, [pc, #152]	@ (8002f40 <TIM_Base_SetConfig+0x148>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d108      	bne.n	8002ebc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a0e      	ldr	r2, [pc, #56]	@ (8002f18 <TIM_Base_SetConfig+0x120>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d003      	beq.n	8002eea <TIM_Base_SetConfig+0xf2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a10      	ldr	r2, [pc, #64]	@ (8002f28 <TIM_Base_SetConfig+0x130>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d103      	bne.n	8002ef2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f043 0204 	orr.w	r2, r3, #4
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	601a      	str	r2, [r3, #0]
}
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40010000 	.word	0x40010000
 8002f1c:	40000400 	.word	0x40000400
 8002f20:	40000800 	.word	0x40000800
 8002f24:	40000c00 	.word	0x40000c00
 8002f28:	40010400 	.word	0x40010400
 8002f2c:	40014000 	.word	0x40014000
 8002f30:	40014400 	.word	0x40014400
 8002f34:	40014800 	.word	0x40014800
 8002f38:	40001800 	.word	0x40001800
 8002f3c:	40001c00 	.word	0x40001c00
 8002f40:	40002000 	.word	0x40002000

08002f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e05a      	b.n	8003012 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a21      	ldr	r2, [pc, #132]	@ (8003020 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d022      	beq.n	8002fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fa8:	d01d      	beq.n	8002fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1d      	ldr	r2, [pc, #116]	@ (8003024 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d018      	beq.n	8002fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8003028 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d013      	beq.n	8002fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800302c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00e      	beq.n	8002fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a18      	ldr	r2, [pc, #96]	@ (8003030 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d009      	beq.n	8002fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a17      	ldr	r2, [pc, #92]	@ (8003034 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d004      	beq.n	8002fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a15      	ldr	r2, [pc, #84]	@ (8003038 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d10c      	bne.n	8003000 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40010000 	.word	0x40010000
 8003024:	40000400 	.word	0x40000400
 8003028:	40000800 	.word	0x40000800
 800302c:	40000c00 	.word	0x40000c00
 8003030:	40010400 	.word	0x40010400
 8003034:	40014000 	.word	0x40014000
 8003038:	40001800 	.word	0x40001800

0800303c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <memset>:
 8003064:	4402      	add	r2, r0
 8003066:	4603      	mov	r3, r0
 8003068:	4293      	cmp	r3, r2
 800306a:	d100      	bne.n	800306e <memset+0xa>
 800306c:	4770      	bx	lr
 800306e:	f803 1b01 	strb.w	r1, [r3], #1
 8003072:	e7f9      	b.n	8003068 <memset+0x4>

08003074 <__libc_init_array>:
 8003074:	b570      	push	{r4, r5, r6, lr}
 8003076:	4d0d      	ldr	r5, [pc, #52]	@ (80030ac <__libc_init_array+0x38>)
 8003078:	4c0d      	ldr	r4, [pc, #52]	@ (80030b0 <__libc_init_array+0x3c>)
 800307a:	1b64      	subs	r4, r4, r5
 800307c:	10a4      	asrs	r4, r4, #2
 800307e:	2600      	movs	r6, #0
 8003080:	42a6      	cmp	r6, r4
 8003082:	d109      	bne.n	8003098 <__libc_init_array+0x24>
 8003084:	4d0b      	ldr	r5, [pc, #44]	@ (80030b4 <__libc_init_array+0x40>)
 8003086:	4c0c      	ldr	r4, [pc, #48]	@ (80030b8 <__libc_init_array+0x44>)
 8003088:	f000 f818 	bl	80030bc <_init>
 800308c:	1b64      	subs	r4, r4, r5
 800308e:	10a4      	asrs	r4, r4, #2
 8003090:	2600      	movs	r6, #0
 8003092:	42a6      	cmp	r6, r4
 8003094:	d105      	bne.n	80030a2 <__libc_init_array+0x2e>
 8003096:	bd70      	pop	{r4, r5, r6, pc}
 8003098:	f855 3b04 	ldr.w	r3, [r5], #4
 800309c:	4798      	blx	r3
 800309e:	3601      	adds	r6, #1
 80030a0:	e7ee      	b.n	8003080 <__libc_init_array+0xc>
 80030a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a6:	4798      	blx	r3
 80030a8:	3601      	adds	r6, #1
 80030aa:	e7f2      	b.n	8003092 <__libc_init_array+0x1e>
 80030ac:	080030ec 	.word	0x080030ec
 80030b0:	080030ec 	.word	0x080030ec
 80030b4:	080030ec 	.word	0x080030ec
 80030b8:	080030f0 	.word	0x080030f0

080030bc <_init>:
 80030bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030be:	bf00      	nop
 80030c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c2:	bc08      	pop	{r3}
 80030c4:	469e      	mov	lr, r3
 80030c6:	4770      	bx	lr

080030c8 <_fini>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	bf00      	nop
 80030cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ce:	bc08      	pop	{r3}
 80030d0:	469e      	mov	lr, r3
 80030d2:	4770      	bx	lr
