
adc_resolutions.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002274  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080023fc  080023fc  000033fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800240c  0800240c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800240c  0800240c  0000340c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002414  08002414  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002414  08002414  00003414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002418  08002418  00003418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800241c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000068  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000648c  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000155f  00000000  00000000  0000a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005a8  00000000  00000000  0000ba28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000042a  00000000  00000000  0000bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002044d  00000000  00000000  0000c3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006dff  00000000  00000000  0002c847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c931d  00000000  00000000  00033646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fc963  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001580  00000000  00000000  000fc9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  000fdf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080023e4 	.word	0x080023e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080023e4 	.word	0x080023e4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_ADC_LevelOutOfWindowCallback>:
	/* Private function prototypes -----------------------------------------------*/
	void SystemClock_Config(void);
	static void MX_GPIO_Init(void);
	static void MX_ADC1_Init(void);
	void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
	{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	  if (hadc->Instance == ADC1)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a05      	ldr	r2, [pc, #20]	@ (8000518 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d104      	bne.n	8000510 <HAL_ADC_LevelOutOfWindowCallback+0x1c>
	  {
		// Analog watchdog tetiklendi
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2102      	movs	r1, #2
 800050a:	4804      	ldr	r0, [pc, #16]	@ (800051c <HAL_ADC_LevelOutOfWindowCallback+0x28>)
 800050c:	f001 fb00 	bl	8001b10 <HAL_GPIO_WritePin>
	  }
	}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40012000 	.word	0x40012000
 800051c:	40020000 	.word	0x40020000

08000520 <main>:
	/**
	  * @brief  The application entry point.
	  * @retval int
	  */
	int main(void)
	{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	  /* USER CODE END 1 */

	  /* MCU Configuration--------------------------------------------------------*/

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 8000524:	f000 fa34 	bl	8000990 <HAL_Init>
	  /* USER CODE BEGIN Init */

	  /* USER CODE END Init */

	  /* Configure the system clock */
	  SystemClock_Config();
 8000528:	f000 f81e 	bl	8000568 <SystemClock_Config>
	  /* USER CODE BEGIN SysInit */

	  /* USER CODE END SysInit */

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 800052c:	f000 f8ee 	bl	800070c <MX_GPIO_Init>
	  MX_ADC1_Init();
 8000530:	f000 f878 	bl	8000624 <MX_ADC1_Init>
	  /* USER CODE BEGIN 2 */

	  /* USER CODE END 2 */
	  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000534:	2200      	movs	r2, #0
 8000536:	2100      	movs	r1, #0
 8000538:	2012      	movs	r0, #18
 800053a:	f001 f916 	bl	800176a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(ADC_IRQn);
 800053e:	2012      	movs	r0, #18
 8000540:	f001 f92f 	bl	80017a2 <HAL_NVIC_EnableIRQ>
	  HAL_ADC_Start_IT(&hadc1);
 8000544:	4806      	ldr	r0, [pc, #24]	@ (8000560 <main+0x40>)
 8000546:	f000 fbab 	bl	8000ca0 <HAL_ADC_Start_IT>
	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */

	  while (1)
	  {
			HAL_ADC_Start(&hadc1);
 800054a:	4805      	ldr	r0, [pc, #20]	@ (8000560 <main+0x40>)
 800054c:	f000 fad6 	bl	8000afc <HAL_ADC_Start>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2102      	movs	r1, #2
 8000554:	4803      	ldr	r0, [pc, #12]	@ (8000564 <main+0x44>)
 8000556:	f001 fadb 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_ADC_Start(&hadc1);
 800055a:	bf00      	nop
 800055c:	e7f5      	b.n	800054a <main+0x2a>
 800055e:	bf00      	nop
 8000560:	20000028 	.word	0x20000028
 8000564:	40020000 	.word	0x40020000

08000568 <SystemClock_Config>:
	/**
	  * @brief System Clock Configuration
	  * @retval None
	  */
	void SystemClock_Config(void)
	{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	@ 0x50
 800056c:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	@ 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f001 ff08 	bl	800238c <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b22      	ldr	r3, [pc, #136]	@ (800061c <SystemClock_Config+0xb4>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	4a21      	ldr	r2, [pc, #132]	@ (800061c <SystemClock_Config+0xb4>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	@ 0x40
 800059c:	4b1f      	ldr	r3, [pc, #124]	@ (800061c <SystemClock_Config+0xb4>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000620 <SystemClock_Config+0xb8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000620 <SystemClock_Config+0xb8>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b19      	ldr	r3, [pc, #100]	@ (8000620 <SystemClock_Config+0xb8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c4:	2302      	movs	r3, #2
 80005c6:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	633b      	str	r3, [r7, #48]	@ 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63bb      	str	r3, [r7, #56]	@ 0x38
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fab3 	bl	8001b44 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x80>
	  {
		Error_Handler();
 80005e4:	f000 f8e4 	bl	80007b0 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	60fb      	str	r3, [r7, #12]
								  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fd16 	bl	8002034 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xaa>
	  {
		Error_Handler();
 800060e:	f000 f8cf 	bl	80007b0 <Error_Handler>
	  }
	}
 8000612:	bf00      	nop
 8000614:	3750      	adds	r7, #80	@ 0x50
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_ADC1_Init>:
	  * @brief ADC1 Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_ADC1_Init(void)
	{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	@ 0x28
 8000628:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800062a:	f107 0310 	add.w	r3, r7, #16
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]
 800063a:	615a      	str	r2, [r3, #20]
	  ADC_ChannelConfTypeDef sConfig = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]

	  /* USER CODE END ADC1_Init 1 */

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 8000648:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <MX_ADC1_Init+0xd8>)
 800064a:	4a2d      	ldr	r2, [pc, #180]	@ (8000700 <MX_ADC1_Init+0xdc>)
 800064c:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800064e:	4b2b      	ldr	r3, [pc, #172]	@ (80006fc <MX_ADC1_Init+0xd8>)
 8000650:	2200      	movs	r2, #0
 8000652:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000654:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <MX_ADC1_Init+0xd8>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = DISABLE;
 800065a:	4b28      	ldr	r3, [pc, #160]	@ (80006fc <MX_ADC1_Init+0xd8>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8000660:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <MX_ADC1_Init+0xd8>)
 8000662:	2200      	movs	r2, #0
 8000664:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000666:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <MX_ADC1_Init+0xd8>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066e:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <MX_ADC1_Init+0xd8>)
 8000670:	2200      	movs	r2, #0
 8000672:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000674:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <MX_ADC1_Init+0xd8>)
 8000676:	4a23      	ldr	r2, [pc, #140]	@ (8000704 <MX_ADC1_Init+0xe0>)
 8000678:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067a:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <MX_ADC1_Init+0xd8>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8000680:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <MX_ADC1_Init+0xd8>)
 8000682:	2201      	movs	r2, #1
 8000684:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000686:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <MX_ADC1_Init+0xd8>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068e:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <MX_ADC1_Init+0xd8>)
 8000690:	2201      	movs	r2, #1
 8000692:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000694:	4819      	ldr	r0, [pc, #100]	@ (80006fc <MX_ADC1_Init+0xd8>)
 8000696:	f000 f9ed 	bl	8000a74 <HAL_ADC_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x80>
	  {
		Error_Handler();
 80006a0:	f000 f886 	bl	80007b0 <Error_Handler>
	  }

	  /** Configure the analog watchdog
	  */
	  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80006a4:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <MX_ADC1_Init+0xe4>)
 80006a6:	613b      	str	r3, [r7, #16]
	  AnalogWDGConfig.HighThreshold = 4095;
 80006a8:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80006ac:	617b      	str	r3, [r7, #20]
	  AnalogWDGConfig.LowThreshold = 3000;
 80006ae:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80006b2:	61bb      	str	r3, [r7, #24]
	  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
	  AnalogWDGConfig.ITMode = ENABLE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	f887 3020 	strb.w	r3, [r7, #32]
	  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	4619      	mov	r1, r3
 80006c4:	480d      	ldr	r0, [pc, #52]	@ (80006fc <MX_ADC1_Init+0xd8>)
 80006c6:	f000 fe0f 	bl	80012e8 <HAL_ADC_AnalogWDGConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC1_Init+0xb0>
	  {
		Error_Handler();
 80006d0:	f000 f86e 	bl	80007b0 <Error_Handler>
	  }

	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80006d8:	2301      	movs	r3, #1
 80006da:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	@ (80006fc <MX_ADC1_Init+0xd8>)
 80006e6:	f000 fcdd 	bl	80010a4 <HAL_ADC_ConfigChannel>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0xd0>
	  {
		Error_Handler();
 80006f0:	f000 f85e 	bl	80007b0 <Error_Handler>
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */

	}
 80006f4:	bf00      	nop
 80006f6:	3728      	adds	r7, #40	@ 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000028 	.word	0x20000028
 8000700:	40012000 	.word	0x40012000
 8000704:	0f000001 	.word	0x0f000001
 8000708:	00800200 	.word	0x00800200

0800070c <MX_GPIO_Init>:
	  * @brief GPIO Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_GPIO_Init(void)
	{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
	  /* USER CODE BEGIN MX_GPIO_Init_1 */

	  /* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <MX_GPIO_Init+0x98>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a1e      	ldr	r2, [pc, #120]	@ (80007a4 <MX_GPIO_Init+0x98>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <MX_GPIO_Init+0x98>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <MX_GPIO_Init+0x98>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a17      	ldr	r2, [pc, #92]	@ (80007a4 <MX_GPIO_Init+0x98>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <MX_GPIO_Init+0x98>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2102      	movs	r1, #2
 800075e:	4812      	ldr	r0, [pc, #72]	@ (80007a8 <MX_GPIO_Init+0x9c>)
 8000760:	f001 f9d6 	bl	8001b10 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PA1 */
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000764:	2302      	movs	r3, #2
 8000766:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <MX_GPIO_Init+0x9c>)
 800077c:	f001 f82c 	bl	80017d8 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PB9 */
	  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000780:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000784:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_GPIO_Init+0xa0>)
 8000796:	f001 f81f 	bl	80017d8 <HAL_GPIO_Init>

	  /* USER CODE BEGIN MX_GPIO_Init_2 */

	  /* USER CODE END MX_GPIO_Init_2 */
	}
 800079a:	bf00      	nop
 800079c:	3720      	adds	r7, #32
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020000 	.word	0x40020000
 80007ac:	40020400 	.word	0x40020400

080007b0 <Error_Handler>:
	/**
	  * @brief  This function is executed in case of error occurrence.
	  * @retval None
	  */
	void Error_Handler(void)
	{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
	  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <Error_Handler+0x8>

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000808 <HAL_MspInit+0x4c>)
 80007cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000808 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e6:	4a08      	ldr	r2, [pc, #32]	@ (8000808 <HAL_MspInit+0x4c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a1b      	ldr	r2, [pc, #108]	@ (8000898 <HAL_ADC_MspInit+0x8c>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d12f      	bne.n	800088e <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <HAL_ADC_MspInit+0x90>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000836:	4a19      	ldr	r2, [pc, #100]	@ (800089c <HAL_ADC_MspInit+0x90>)
 8000838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800083c:	6453      	str	r3, [r2, #68]	@ 0x44
 800083e:	4b17      	ldr	r3, [pc, #92]	@ (800089c <HAL_ADC_MspInit+0x90>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <HAL_ADC_MspInit+0x90>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a12      	ldr	r2, [pc, #72]	@ (800089c <HAL_ADC_MspInit+0x90>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b10      	ldr	r3, [pc, #64]	@ (800089c <HAL_ADC_MspInit+0x90>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000866:	2309      	movs	r3, #9
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086a:	2303      	movs	r3, #3
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	4809      	ldr	r0, [pc, #36]	@ (80008a0 <HAL_ADC_MspInit+0x94>)
 800087a:	f000 ffad 	bl	80017d8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	2012      	movs	r0, #18
 8000884:	f000 ff71 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000888:	2012      	movs	r0, #18
 800088a:	f000 ff8a 	bl	80017a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800088e:	bf00      	nop
 8000890:	3728      	adds	r7, #40	@ 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40012000 	.word	0x40012000
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020000 	.word	0x40020000

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <NMI_Handler+0x4>

080008ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <MemManage_Handler+0x4>

080008bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <BusFault_Handler+0x4>

080008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <UsageFault_Handler+0x4>

080008cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fa:	f000 f89b 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000908:	4802      	ldr	r0, [pc, #8]	@ (8000914 <ADC_IRQHandler+0x10>)
 800090a:	f000 faa7 	bl	8000e5c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000028 	.word	0x20000028

08000918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <SystemInit+0x20>)
 800091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000922:	4a05      	ldr	r2, [pc, #20]	@ (8000938 <SystemInit+0x20>)
 8000924:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000928:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800093c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000974 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000940:	f7ff ffea 	bl	8000918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000944:	480c      	ldr	r0, [pc, #48]	@ (8000978 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000946:	490d      	ldr	r1, [pc, #52]	@ (800097c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000948:	4a0d      	ldr	r2, [pc, #52]	@ (8000980 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800094c:	e002      	b.n	8000954 <LoopCopyDataInit>

0800094e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000952:	3304      	adds	r3, #4

08000954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000958:	d3f9      	bcc.n	800094e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095a:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800095c:	4c0a      	ldr	r4, [pc, #40]	@ (8000988 <LoopFillZerobss+0x22>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000960:	e001      	b.n	8000966 <LoopFillZerobss>

08000962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000964:	3204      	adds	r2, #4

08000966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000968:	d3fb      	bcc.n	8000962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800096a:	f001 fd17 	bl	800239c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800096e:	f7ff fdd7 	bl	8000520 <main>
  bx  lr    
 8000972:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000974:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800097c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000980:	0800241c 	.word	0x0800241c
  ldr r2, =_sbss
 8000984:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000988:	20000074 	.word	0x20000074

0800098c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800098c:	e7fe      	b.n	800098c <CAN1_RX0_IRQHandler>
	...

08000990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000994:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <HAL_Init+0x40>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0d      	ldr	r2, [pc, #52]	@ (80009d0 <HAL_Init+0x40>)
 800099a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800099e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009a0:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <HAL_Init+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <HAL_Init+0x40>)
 80009a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a07      	ldr	r2, [pc, #28]	@ (80009d0 <HAL_Init+0x40>)
 80009b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 fecb 	bl	8001754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009be:	200f      	movs	r0, #15
 80009c0:	f000 f808 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c4:	f7ff fefa 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023c00 	.word	0x40023c00

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <HAL_InitTick+0x54>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <HAL_InitTick+0x58>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fee3 	bl	80017be <HAL_SYSTICK_Config>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00e      	b.n	8000a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d80a      	bhi.n	8000a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a10:	f000 feab 	bl	800176a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a14:	4a06      	ldr	r2, [pc, #24]	@ (8000a30 <HAL_InitTick+0x5c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000004 	.word	0x20000004

08000a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_IncTick+0x20>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_IncTick+0x24>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a04      	ldr	r2, [pc, #16]	@ (8000a58 <HAL_IncTick+0x24>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000070 	.word	0x20000070

08000a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a60:	4b03      	ldr	r3, [pc, #12]	@ (8000a70 <HAL_GetTick+0x14>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000070 	.word	0x20000070

08000a74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d101      	bne.n	8000a8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e033      	b.n	8000af2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d109      	bne.n	8000aa6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff feba 	bl	800080c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	f003 0310 	and.w	r3, r3, #16
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d118      	bne.n	8000ae4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000aba:	f023 0302 	bic.w	r3, r3, #2
 8000abe:	f043 0202 	orr.w	r2, r3, #2
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f000 fc6e 	bl	80013a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	f023 0303 	bic.w	r3, r3, #3
 8000ada:	f043 0201 	orr.w	r2, r3, #1
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ae2:	e001      	b.n	8000ae8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2200      	movs	r2, #0
 8000aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d101      	bne.n	8000b16 <HAL_ADC_Start+0x1a>
 8000b12:	2302      	movs	r3, #2
 8000b14:	e0b2      	b.n	8000c7c <HAL_ADC_Start+0x180>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d018      	beq.n	8000b5e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	689a      	ldr	r2, [r3, #8]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f042 0201 	orr.w	r2, r2, #1
 8000b3a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b3c:	4b52      	ldr	r3, [pc, #328]	@ (8000c88 <HAL_ADC_Start+0x18c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a52      	ldr	r2, [pc, #328]	@ (8000c8c <HAL_ADC_Start+0x190>)
 8000b42:	fba2 2303 	umull	r2, r3, r2, r3
 8000b46:	0c9a      	lsrs	r2, r3, #18
 8000b48:	4613      	mov	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000b50:	e002      	b.n	8000b58 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	3b01      	subs	r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d1f9      	bne.n	8000b52 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d17a      	bne.n	8000c62 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b70:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000b74:	f023 0301 	bic.w	r3, r3, #1
 8000b78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d007      	beq.n	8000b9e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000b96:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000baa:	d106      	bne.n	8000bba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb0:	f023 0206 	bic.w	r2, r3, #6
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	645a      	str	r2, [r3, #68]	@ 0x44
 8000bb8:	e002      	b.n	8000bc0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bc8:	4b31      	ldr	r3, [pc, #196]	@ (8000c90 <HAL_ADC_Start+0x194>)
 8000bca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000bd4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 031f 	and.w	r3, r3, #31
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d12a      	bne.n	8000c38 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a2b      	ldr	r2, [pc, #172]	@ (8000c94 <HAL_ADC_Start+0x198>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d015      	beq.n	8000c18 <HAL_ADC_Start+0x11c>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a29      	ldr	r2, [pc, #164]	@ (8000c98 <HAL_ADC_Start+0x19c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d105      	bne.n	8000c02 <HAL_ADC_Start+0x106>
 8000bf6:	4b26      	ldr	r3, [pc, #152]	@ (8000c90 <HAL_ADC_Start+0x194>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 031f 	and.w	r3, r3, #31
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d00a      	beq.n	8000c18 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a25      	ldr	r2, [pc, #148]	@ (8000c9c <HAL_ADC_Start+0x1a0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d136      	bne.n	8000c7a <HAL_ADC_Start+0x17e>
 8000c0c:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <HAL_ADC_Start+0x194>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f003 0310 	and.w	r3, r3, #16
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d130      	bne.n	8000c7a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d129      	bne.n	8000c7a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	689a      	ldr	r2, [r3, #8]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	e020      	b.n	8000c7a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a15      	ldr	r2, [pc, #84]	@ (8000c94 <HAL_ADC_Start+0x198>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d11b      	bne.n	8000c7a <HAL_ADC_Start+0x17e>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d114      	bne.n	8000c7a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	e00b      	b.n	8000c7a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c66:	f043 0210 	orr.w	r2, r3, #16
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	f043 0201 	orr.w	r2, r3, #1
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	431bde83 	.word	0x431bde83
 8000c90:	40012300 	.word	0x40012300
 8000c94:	40012000 	.word	0x40012000
 8000c98:	40012100 	.word	0x40012100
 8000c9c:	40012200 	.word	0x40012200

08000ca0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d101      	bne.n	8000cba <HAL_ADC_Start_IT+0x1a>
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	e0bd      	b.n	8000e36 <HAL_ADC_Start_IT+0x196>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d018      	beq.n	8000d02 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f042 0201 	orr.w	r2, r2, #1
 8000cde:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ce0:	4b58      	ldr	r3, [pc, #352]	@ (8000e44 <HAL_ADC_Start_IT+0x1a4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a58      	ldr	r2, [pc, #352]	@ (8000e48 <HAL_ADC_Start_IT+0x1a8>)
 8000ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cea:	0c9a      	lsrs	r2, r3, #18
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000cf4:	e002      	b.n	8000cfc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f9      	bne.n	8000cf6 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	f040 8085 	bne.w	8000e1c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000d1a:	f023 0301 	bic.w	r3, r3, #1
 8000d1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d007      	beq.n	8000d44 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d38:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d3c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000d50:	d106      	bne.n	8000d60 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d56:	f023 0206 	bic.w	r2, r3, #6
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	645a      	str	r2, [r3, #68]	@ 0x44
 8000d5e:	e002      	b.n	8000d66 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d6e:	4b37      	ldr	r3, [pc, #220]	@ (8000e4c <HAL_ADC_Start_IT+0x1ac>)
 8000d70:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000d7a:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6812      	ldr	r2, [r2, #0]
 8000d86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d8a:	f043 0320 	orr.w	r3, r3, #32
 8000d8e:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 031f 	and.w	r3, r3, #31
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d12a      	bne.n	8000df2 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e50 <HAL_ADC_Start_IT+0x1b0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d015      	beq.n	8000dd2 <HAL_ADC_Start_IT+0x132>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a2a      	ldr	r2, [pc, #168]	@ (8000e54 <HAL_ADC_Start_IT+0x1b4>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d105      	bne.n	8000dbc <HAL_ADC_Start_IT+0x11c>
 8000db0:	4b26      	ldr	r3, [pc, #152]	@ (8000e4c <HAL_ADC_Start_IT+0x1ac>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 031f 	and.w	r3, r3, #31
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d00a      	beq.n	8000dd2 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a25      	ldr	r2, [pc, #148]	@ (8000e58 <HAL_ADC_Start_IT+0x1b8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d136      	bne.n	8000e34 <HAL_ADC_Start_IT+0x194>
 8000dc6:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <HAL_ADC_Start_IT+0x1ac>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0310 	and.w	r3, r3, #16
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d130      	bne.n	8000e34 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d129      	bne.n	8000e34 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	e020      	b.n	8000e34 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a16      	ldr	r2, [pc, #88]	@ (8000e50 <HAL_ADC_Start_IT+0x1b0>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d11b      	bne.n	8000e34 <HAL_ADC_Start_IT+0x194>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d114      	bne.n	8000e34 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	e00b      	b.n	8000e34 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e20:	f043 0210 	orr.w	r2, r3, #16
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2c:	f043 0201 	orr.w	r2, r3, #1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000000 	.word	0x20000000
 8000e48:	431bde83 	.word	0x431bde83
 8000e4c:	40012300 	.word	0x40012300
 8000e50:	40012000 	.word	0x40012000
 8000e54:	40012100 	.word	0x40012100
 8000e58:	40012200 	.word	0x40012200

08000e5c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	f003 0320 	and.w	r3, r3, #32
 8000e8a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d049      	beq.n	8000f26 <HAL_ADC_IRQHandler+0xca>
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d046      	beq.n	8000f26 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9c:	f003 0310 	and.w	r3, r3, #16
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d105      	bne.n	8000eb0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d12b      	bne.n	8000f16 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d127      	bne.n	8000f16 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ecc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d006      	beq.n	8000ee2 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d119      	bne.n	8000f16 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0220 	bic.w	r2, r2, #32
 8000ef0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d105      	bne.n	8000f16 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	f043 0201 	orr.w	r2, r3, #1
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 f8b0 	bl	800107c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f06f 0212 	mvn.w	r2, #18
 8000f24:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f34:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d057      	beq.n	8000fec <HAL_ADC_IRQHandler+0x190>
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d054      	beq.n	8000fec <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	f003 0310 	and.w	r3, r3, #16
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d105      	bne.n	8000f5a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d139      	bne.n	8000fdc <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f6e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d006      	beq.n	8000f84 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d12b      	bne.n	8000fdc <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d124      	bne.n	8000fdc <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d11d      	bne.n	8000fdc <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d119      	bne.n	8000fdc <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fb6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d105      	bne.n	8000fdc <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	f043 0201 	orr.w	r2, r3, #1
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 fadf 	bl	80015a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f06f 020c 	mvn.w	r2, #12
 8000fea:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ffa:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d017      	beq.n	8001032 <HAL_ADC_IRQHandler+0x1d6>
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d014      	beq.n	8001032 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b01      	cmp	r3, #1
 8001014:	d10d      	bne.n	8001032 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff fa66 	bl	80004f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f06f 0201 	mvn.w	r2, #1
 8001030:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f003 0320 	and.w	r3, r3, #32
 8001038:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001040:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d015      	beq.n	8001074 <HAL_ADC_IRQHandler+0x218>
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d012      	beq.n	8001074 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001052:	f043 0202 	orr.w	r2, r3, #2
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f06f 0220 	mvn.w	r2, #32
 8001062:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 f813 	bl	8001090 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f06f 0220 	mvn.w	r2, #32
 8001072:	601a      	str	r2, [r3, #0]
  }
}
 8001074:	bf00      	nop
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d101      	bne.n	80010c0 <HAL_ADC_ConfigChannel+0x1c>
 80010bc:	2302      	movs	r3, #2
 80010be:	e105      	b.n	80012cc <HAL_ADC_ConfigChannel+0x228>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b09      	cmp	r3, #9
 80010ce:	d925      	bls.n	800111c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68d9      	ldr	r1, [r3, #12]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	461a      	mov	r2, r3
 80010de:	4613      	mov	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4413      	add	r3, r2
 80010e4:	3b1e      	subs	r3, #30
 80010e6:	2207      	movs	r2, #7
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43da      	mvns	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	400a      	ands	r2, r1
 80010f4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68d9      	ldr	r1, [r3, #12]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	4603      	mov	r3, r0
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4403      	add	r3, r0
 800110e:	3b1e      	subs	r3, #30
 8001110:	409a      	lsls	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	430a      	orrs	r2, r1
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	e022      	b.n	8001162 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6919      	ldr	r1, [r3, #16]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	b29b      	uxth	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	2207      	movs	r2, #7
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43da      	mvns	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	400a      	ands	r2, r1
 800113e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6919      	ldr	r1, [r3, #16]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	b29b      	uxth	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	4603      	mov	r3, r0
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4403      	add	r3, r0
 8001158:	409a      	lsls	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	430a      	orrs	r2, r1
 8001160:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b06      	cmp	r3, #6
 8001168:	d824      	bhi.n	80011b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	3b05      	subs	r3, #5
 800117c:	221f      	movs	r2, #31
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	400a      	ands	r2, r1
 800118a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	b29b      	uxth	r3, r3
 8001198:	4618      	mov	r0, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	3b05      	subs	r3, #5
 80011a6:	fa00 f203 	lsl.w	r2, r0, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80011b2:	e04c      	b.n	800124e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b0c      	cmp	r3, #12
 80011ba:	d824      	bhi.n	8001206 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	3b23      	subs	r3, #35	@ 0x23
 80011ce:	221f      	movs	r2, #31
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43da      	mvns	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	400a      	ands	r2, r1
 80011dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	3b23      	subs	r3, #35	@ 0x23
 80011f8:	fa00 f203 	lsl.w	r2, r0, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	430a      	orrs	r2, r1
 8001202:	631a      	str	r2, [r3, #48]	@ 0x30
 8001204:	e023      	b.n	800124e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	3b41      	subs	r3, #65	@ 0x41
 8001218:	221f      	movs	r2, #31
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	400a      	ands	r2, r1
 8001226:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	3b41      	subs	r3, #65	@ 0x41
 8001242:	fa00 f203 	lsl.w	r2, r0, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800124e:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <HAL_ADC_ConfigChannel+0x234>)
 8001250:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a21      	ldr	r2, [pc, #132]	@ (80012dc <HAL_ADC_ConfigChannel+0x238>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d109      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x1cc>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b12      	cmp	r3, #18
 8001262:	d105      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a19      	ldr	r2, [pc, #100]	@ (80012dc <HAL_ADC_ConfigChannel+0x238>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d123      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x21e>
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b10      	cmp	r3, #16
 8001280:	d003      	beq.n	800128a <HAL_ADC_ConfigChannel+0x1e6>
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b11      	cmp	r3, #17
 8001288:	d11b      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b10      	cmp	r3, #16
 800129c:	d111      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800129e:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <HAL_ADC_ConfigChannel+0x23c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a10      	ldr	r2, [pc, #64]	@ (80012e4 <HAL_ADC_ConfigChannel+0x240>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	0c9a      	lsrs	r2, r3, #18
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012b4:	e002      	b.n	80012bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f9      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40012300 	.word	0x40012300
 80012dc:	40012000 	.word	0x40012000
 80012e0:	20000000 	.word	0x20000000
 80012e4:	431bde83 	.word	0x431bde83

080012e8 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */

  /* Process locked */
  __HAL_LOCK(hadc);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d101      	bne.n	8001300 <HAL_ADC_AnalogWDGConfig+0x18>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e04d      	b.n	800139c <HAL_ADC_AnalogWDGConfig+0xb4>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (AnalogWDGConfig->ITMode == ENABLE)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	7c1b      	ldrb	r3, [r3, #16]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d108      	bne.n	8001322 <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	e007      	b.n	8001332 <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001330:	605a      	str	r2, [r3, #4]
  }

  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001340:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001344:	6053      	str	r3, [r2, #4]

  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6859      	ldr	r1, [r3, #4]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	605a      	str	r2, [r3, #4]

  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	6852      	ldr	r2, [r2, #4]
 8001360:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	6892      	ldr	r2, [r2, #8]
 800136a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 021f 	bic.w	r2, r2, #31
 800137a:	605a      	str	r2, [r3, #4]

  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	b29b      	uxth	r3, r3
 8001388:	4619      	mov	r1, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013b0:	4b79      	ldr	r3, [pc, #484]	@ (8001598 <ADC_Init+0x1f0>)
 80013b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6859      	ldr	r1, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	021a      	lsls	r2, r3, #8
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001400:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6859      	ldr	r1, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001422:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6899      	ldr	r1, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68da      	ldr	r2, [r3, #12]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800143a:	4a58      	ldr	r2, [pc, #352]	@ (800159c <ADC_Init+0x1f4>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d022      	beq.n	8001486 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800144e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6899      	ldr	r1, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001470:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6899      	ldr	r1, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	e00f      	b.n	80014a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001494:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0202 	bic.w	r2, r2, #2
 80014b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6899      	ldr	r1, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7e1b      	ldrb	r3, [r3, #24]
 80014c0:	005a      	lsls	r2, r3, #1
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d01b      	beq.n	800150c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80014f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6859      	ldr	r1, [r3, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fe:	3b01      	subs	r3, #1
 8001500:	035a      	lsls	r2, r3, #13
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	e007      	b.n	800151c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800151a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800152a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	3b01      	subs	r3, #1
 8001538:	051a      	lsls	r2, r3, #20
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001550:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6899      	ldr	r1, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800155e:	025a      	lsls	r2, r3, #9
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001576:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6899      	ldr	r1, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	029a      	lsls	r2, r3, #10
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	609a      	str	r2, [r3, #8]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40012300 	.word	0x40012300
 800159c:	0f000001 	.word	0x0f000001

080015a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	@ (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001600:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <__NVIC_GetPriorityGrouping+0x18>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	f003 0307 	and.w	r3, r3, #7
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db0b      	blt.n	8001642 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	f003 021f 	and.w	r2, r3, #31
 8001630:	4907      	ldr	r1, [pc, #28]	@ (8001650 <__NVIC_EnableIRQ+0x38>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	2001      	movs	r0, #1
 800163a:	fa00 f202 	lsl.w	r2, r0, r2
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e100 	.word	0xe000e100

08001654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	6039      	str	r1, [r7, #0]
 800165e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	2b00      	cmp	r3, #0
 8001666:	db0a      	blt.n	800167e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	490c      	ldr	r1, [pc, #48]	@ (80016a0 <__NVIC_SetPriority+0x4c>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	0112      	lsls	r2, r2, #4
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	440b      	add	r3, r1
 8001678:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800167c:	e00a      	b.n	8001694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4908      	ldr	r1, [pc, #32]	@ (80016a4 <__NVIC_SetPriority+0x50>)
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	3b04      	subs	r3, #4
 800168c:	0112      	lsls	r2, r2, #4
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	440b      	add	r3, r1
 8001692:	761a      	strb	r2, [r3, #24]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000e100 	.word	0xe000e100
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	@ 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f1c3 0307 	rsb	r3, r3, #7
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	bf28      	it	cs
 80016c6:	2304      	movcs	r3, #4
 80016c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3304      	adds	r3, #4
 80016ce:	2b06      	cmp	r3, #6
 80016d0:	d902      	bls.n	80016d8 <NVIC_EncodePriority+0x30>
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3b03      	subs	r3, #3
 80016d6:	e000      	b.n	80016da <NVIC_EncodePriority+0x32>
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43da      	mvns	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	401a      	ands	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	43d9      	mvns	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	4313      	orrs	r3, r2
         );
}
 8001702:	4618      	mov	r0, r3
 8001704:	3724      	adds	r7, #36	@ 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001720:	d301      	bcc.n	8001726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001722:	2301      	movs	r3, #1
 8001724:	e00f      	b.n	8001746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001726:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <SysTick_Config+0x40>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172e:	210f      	movs	r1, #15
 8001730:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001734:	f7ff ff8e 	bl	8001654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001738:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <SysTick_Config+0x40>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	4b04      	ldr	r3, [pc, #16]	@ (8001750 <SysTick_Config+0x40>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff29 	bl	80015b4 <__NVIC_SetPriorityGrouping>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800177c:	f7ff ff3e 	bl	80015fc <__NVIC_GetPriorityGrouping>
 8001780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	6978      	ldr	r0, [r7, #20]
 8001788:	f7ff ff8e 	bl	80016a8 <NVIC_EncodePriority>
 800178c:	4602      	mov	r2, r0
 800178e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff5d 	bl	8001654 <__NVIC_SetPriority>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff31 	bl	8001618 <__NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffa2 	bl	8001710 <SysTick_Config>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	@ 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	e16b      	b.n	8001acc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	f040 815a 	bne.w	8001ac6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d005      	beq.n	800182a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001826:	2b02      	cmp	r3, #2
 8001828:	d130      	bne.n	800188c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 0201 	and.w	r2, r3, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b03      	cmp	r3, #3
 8001896:	d017      	beq.n	80018c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d123      	bne.n	800191c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	08da      	lsrs	r2, r3, #3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3208      	adds	r2, #8
 80018dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	220f      	movs	r2, #15
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	08da      	lsrs	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3208      	adds	r2, #8
 8001916:	69b9      	ldr	r1, [r7, #24]
 8001918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0203 	and.w	r2, r3, #3
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80b4 	beq.w	8001ac6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b60      	ldr	r3, [pc, #384]	@ (8001ae4 <HAL_GPIO_Init+0x30c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	4a5f      	ldr	r2, [pc, #380]	@ (8001ae4 <HAL_GPIO_Init+0x30c>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800196c:	6453      	str	r3, [r2, #68]	@ 0x44
 800196e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ae4 <HAL_GPIO_Init+0x30c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ae8 <HAL_GPIO_Init+0x310>)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a52      	ldr	r2, [pc, #328]	@ (8001aec <HAL_GPIO_Init+0x314>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d02b      	beq.n	80019fe <HAL_GPIO_Init+0x226>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a51      	ldr	r2, [pc, #324]	@ (8001af0 <HAL_GPIO_Init+0x318>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d025      	beq.n	80019fa <HAL_GPIO_Init+0x222>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a50      	ldr	r2, [pc, #320]	@ (8001af4 <HAL_GPIO_Init+0x31c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d01f      	beq.n	80019f6 <HAL_GPIO_Init+0x21e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4f      	ldr	r2, [pc, #316]	@ (8001af8 <HAL_GPIO_Init+0x320>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d019      	beq.n	80019f2 <HAL_GPIO_Init+0x21a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4e      	ldr	r2, [pc, #312]	@ (8001afc <HAL_GPIO_Init+0x324>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d013      	beq.n	80019ee <HAL_GPIO_Init+0x216>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001b00 <HAL_GPIO_Init+0x328>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00d      	beq.n	80019ea <HAL_GPIO_Init+0x212>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001b04 <HAL_GPIO_Init+0x32c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d007      	beq.n	80019e6 <HAL_GPIO_Init+0x20e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001b08 <HAL_GPIO_Init+0x330>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d101      	bne.n	80019e2 <HAL_GPIO_Init+0x20a>
 80019de:	2307      	movs	r3, #7
 80019e0:	e00e      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019e2:	2308      	movs	r3, #8
 80019e4:	e00c      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019e6:	2306      	movs	r3, #6
 80019e8:	e00a      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019ea:	2305      	movs	r3, #5
 80019ec:	e008      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019ee:	2304      	movs	r3, #4
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019f2:	2303      	movs	r3, #3
 80019f4:	e004      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e002      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019fe:	2300      	movs	r3, #0
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f002 0203 	and.w	r2, r2, #3
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	4093      	lsls	r3, r2
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a10:	4935      	ldr	r1, [pc, #212]	@ (8001ae8 <HAL_GPIO_Init+0x310>)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a42:	4a32      	ldr	r2, [pc, #200]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a48:	4b30      	ldr	r3, [pc, #192]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a6c:	4a27      	ldr	r2, [pc, #156]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a72:	4b26      	ldr	r3, [pc, #152]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a96:	4a1d      	ldr	r2, [pc, #116]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac0:	4a12      	ldr	r2, [pc, #72]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	2b0f      	cmp	r3, #15
 8001ad0:	f67f ae90 	bls.w	80017f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3724      	adds	r7, #36	@ 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40013800 	.word	0x40013800
 8001aec:	40020000 	.word	0x40020000
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40020800 	.word	0x40020800
 8001af8:	40020c00 	.word	0x40020c00
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40021400 	.word	0x40021400
 8001b04:	40021800 	.word	0x40021800
 8001b08:	40021c00 	.word	0x40021c00
 8001b0c:	40013c00 	.word	0x40013c00

08001b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b20:	787b      	ldrb	r3, [r7, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b2c:	e003      	b.n	8001b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	041a      	lsls	r2, r3, #16
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	619a      	str	r2, [r3, #24]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e267      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d075      	beq.n	8001c4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b62:	4b88      	ldr	r3, [pc, #544]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d00c      	beq.n	8001b88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b6e:	4b85      	ldr	r3, [pc, #532]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d112      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7a:	4b82      	ldr	r3, [pc, #520]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b86:	d10b      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	4b7e      	ldr	r3, [pc, #504]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d05b      	beq.n	8001c4c <HAL_RCC_OscConfig+0x108>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d157      	bne.n	8001c4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e242      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba8:	d106      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x74>
 8001baa:	4b76      	ldr	r3, [pc, #472]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a75      	ldr	r2, [pc, #468]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e01d      	b.n	8001bf4 <HAL_RCC_OscConfig+0xb0>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x98>
 8001bc2:	4b70      	ldr	r3, [pc, #448]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a6f      	ldr	r2, [pc, #444]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b6d      	ldr	r3, [pc, #436]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a6c      	ldr	r2, [pc, #432]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e00b      	b.n	8001bf4 <HAL_RCC_OscConfig+0xb0>
 8001bdc:	4b69      	ldr	r3, [pc, #420]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a68      	ldr	r2, [pc, #416]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b66      	ldr	r3, [pc, #408]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a65      	ldr	r2, [pc, #404]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d013      	beq.n	8001c24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7fe ff2e 	bl	8000a5c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c04:	f7fe ff2a 	bl	8000a5c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	@ 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e207      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	4b5b      	ldr	r3, [pc, #364]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0xc0>
 8001c22:	e014      	b.n	8001c4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7fe ff1a 	bl	8000a5c <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7fe ff16 	bl	8000a5c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	@ 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e1f3      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	4b51      	ldr	r3, [pc, #324]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0xe8>
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d063      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c66:	4b47      	ldr	r3, [pc, #284]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d11c      	bne.n	8001cac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c72:	4b44      	ldr	r3, [pc, #272]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d116      	bne.n	8001cac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7e:	4b41      	ldr	r3, [pc, #260]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_RCC_OscConfig+0x152>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e1c7      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c96:	4b3b      	ldr	r3, [pc, #236]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4937      	ldr	r1, [pc, #220]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	e03a      	b.n	8001d22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d020      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb4:	4b34      	ldr	r3, [pc, #208]	@ (8001d88 <HAL_RCC_OscConfig+0x244>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7fe fecf 	bl	8000a5c <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7fe fecb 	bl	8000a5c <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e1a8      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce0:	4b28      	ldr	r3, [pc, #160]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4925      	ldr	r1, [pc, #148]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
 8001cf4:	e015      	b.n	8001d22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf6:	4b24      	ldr	r3, [pc, #144]	@ (8001d88 <HAL_RCC_OscConfig+0x244>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7fe feae 	bl	8000a5c <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d04:	f7fe feaa 	bl	8000a5c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e187      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d036      	beq.n	8001d9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d016      	beq.n	8001d64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d36:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <HAL_RCC_OscConfig+0x248>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3c:	f7fe fe8e 	bl	8000a5c <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d44:	f7fe fe8a 	bl	8000a5c <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e167      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x200>
 8001d62:	e01b      	b.n	8001d9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d64:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <HAL_RCC_OscConfig+0x248>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7fe fe77 	bl	8000a5c <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d70:	e00e      	b.n	8001d90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d72:	f7fe fe73 	bl	8000a5c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d907      	bls.n	8001d90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e150      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
 8001d84:	40023800 	.word	0x40023800
 8001d88:	42470000 	.word	0x42470000
 8001d8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d90:	4b88      	ldr	r3, [pc, #544]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1ea      	bne.n	8001d72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8097 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dae:	4b81      	ldr	r3, [pc, #516]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10f      	bne.n	8001dda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	4b7d      	ldr	r3, [pc, #500]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	4a7c      	ldr	r2, [pc, #496]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dca:	4b7a      	ldr	r3, [pc, #488]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dda:	4b77      	ldr	r3, [pc, #476]	@ (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d118      	bne.n	8001e18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de6:	4b74      	ldr	r3, [pc, #464]	@ (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a73      	ldr	r2, [pc, #460]	@ (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df2:	f7fe fe33 	bl	8000a5c <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfa:	f7fe fe2f 	bl	8000a5c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e10c      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	4b6a      	ldr	r3, [pc, #424]	@ (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_OscConfig+0x2ea>
 8001e20:	4b64      	ldr	r3, [pc, #400]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e24:	4a63      	ldr	r2, [pc, #396]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e2c:	e01c      	b.n	8001e68 <HAL_RCC_OscConfig+0x324>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b05      	cmp	r3, #5
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x30c>
 8001e36:	4b5f      	ldr	r3, [pc, #380]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3a:	4a5e      	ldr	r2, [pc, #376]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e42:	4b5c      	ldr	r3, [pc, #368]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e46:	4a5b      	ldr	r2, [pc, #364]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e4e:	e00b      	b.n	8001e68 <HAL_RCC_OscConfig+0x324>
 8001e50:	4b58      	ldr	r3, [pc, #352]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e54:	4a57      	ldr	r2, [pc, #348]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e5c:	4b55      	ldr	r3, [pc, #340]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e60:	4a54      	ldr	r2, [pc, #336]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e62:	f023 0304 	bic.w	r3, r3, #4
 8001e66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d015      	beq.n	8001e9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e70:	f7fe fdf4 	bl	8000a5c <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e78:	f7fe fdf0 	bl	8000a5c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e0cb      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8e:	4b49      	ldr	r3, [pc, #292]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0ee      	beq.n	8001e78 <HAL_RCC_OscConfig+0x334>
 8001e9a:	e014      	b.n	8001ec6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9c:	f7fe fdde 	bl	8000a5c <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea4:	f7fe fdda 	bl	8000a5c <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e0b5      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eba:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1ee      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d105      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ecc:	4b39      	ldr	r3, [pc, #228]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	4a38      	ldr	r2, [pc, #224]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80a1 	beq.w	8002024 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ee2:	4b34      	ldr	r3, [pc, #208]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d05c      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d141      	bne.n	8001f7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b31      	ldr	r3, [pc, #196]	@ (8001fbc <HAL_RCC_OscConfig+0x478>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7fe fdae 	bl	8000a5c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f04:	f7fe fdaa 	bl	8000a5c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e087      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	4b27      	ldr	r3, [pc, #156]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69da      	ldr	r2, [r3, #28]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f30:	019b      	lsls	r3, r3, #6
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f38:	085b      	lsrs	r3, r3, #1
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	041b      	lsls	r3, r3, #16
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	491b      	ldr	r1, [pc, #108]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <HAL_RCC_OscConfig+0x478>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7fe fd83 	bl	8000a5c <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7fe fd7f 	bl	8000a5c <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e05c      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6c:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x416>
 8001f78:	e054      	b.n	8002024 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <HAL_RCC_OscConfig+0x478>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7fe fd6c 	bl	8000a5c <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f88:	f7fe fd68 	bl	8000a5c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e045      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x444>
 8001fa6:	e03d      	b.n	8002024 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e038      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002030 <HAL_RCC_OscConfig+0x4ec>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d028      	beq.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d121      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d11a      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ff6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d111      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	3b01      	subs	r3, #1
 800200a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d107      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800

08002034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0cc      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002048:	4b68      	ldr	r3, [pc, #416]	@ (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d90c      	bls.n	8002070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b65      	ldr	r3, [pc, #404]	@ (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b63      	ldr	r3, [pc, #396]	@ (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0b8      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d020      	beq.n	80020be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002088:	4b59      	ldr	r3, [pc, #356]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4a58      	ldr	r2, [pc, #352]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002092:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a0:	4b53      	ldr	r3, [pc, #332]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4a52      	ldr	r2, [pc, #328]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ac:	4b50      	ldr	r3, [pc, #320]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	494d      	ldr	r1, [pc, #308]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d044      	beq.n	8002154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b47      	ldr	r3, [pc, #284]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d119      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e07f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d003      	beq.n	80020f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f2:	4b3f      	ldr	r3, [pc, #252]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e06f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002102:	4b3b      	ldr	r3, [pc, #236]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e067      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002112:	4b37      	ldr	r3, [pc, #220]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f023 0203 	bic.w	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4934      	ldr	r1, [pc, #208]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	4313      	orrs	r3, r2
 8002122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002124:	f7fe fc9a 	bl	8000a5c <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	e00a      	b.n	8002142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212c:	f7fe fc96 	bl	8000a5c <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e04f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	4b2b      	ldr	r3, [pc, #172]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 020c 	and.w	r2, r3, #12
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	429a      	cmp	r2, r3
 8002152:	d1eb      	bne.n	800212c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002154:	4b25      	ldr	r3, [pc, #148]	@ (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d20c      	bcs.n	800217c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b22      	ldr	r3, [pc, #136]	@ (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e032      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002188:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4916      	ldr	r1, [pc, #88]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021a6:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	490e      	ldr	r1, [pc, #56]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ba:	f000 f821 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80021be:	4602      	mov	r2, r0
 80021c0:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	490a      	ldr	r1, [pc, #40]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	5ccb      	ldrb	r3, [r1, r3]
 80021ce:	fa22 f303 	lsr.w	r3, r2, r3
 80021d2:	4a09      	ldr	r2, [pc, #36]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021d6:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe fbfa 	bl	80009d4 <HAL_InitTick>

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023c00 	.word	0x40023c00
 80021f0:	40023800 	.word	0x40023800
 80021f4:	080023fc 	.word	0x080023fc
 80021f8:	20000000 	.word	0x20000000
 80021fc:	20000004 	.word	0x20000004

08002200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002204:	b090      	sub	sp, #64	@ 0x40
 8002206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002218:	4b59      	ldr	r3, [pc, #356]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b08      	cmp	r3, #8
 8002222:	d00d      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x40>
 8002224:	2b08      	cmp	r3, #8
 8002226:	f200 80a1 	bhi.w	800236c <HAL_RCC_GetSysClockFreq+0x16c>
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x34>
 800222e:	2b04      	cmp	r3, #4
 8002230:	d003      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x3a>
 8002232:	e09b      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002234:	4b53      	ldr	r3, [pc, #332]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x184>)
 8002236:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002238:	e09b      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800223a:	4b53      	ldr	r3, [pc, #332]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x188>)
 800223c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800223e:	e098      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002240:	4b4f      	ldr	r3, [pc, #316]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002248:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800224a:	4b4d      	ldr	r3, [pc, #308]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d028      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002256:	4b4a      	ldr	r3, [pc, #296]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	099b      	lsrs	r3, r3, #6
 800225c:	2200      	movs	r2, #0
 800225e:	623b      	str	r3, [r7, #32]
 8002260:	627a      	str	r2, [r7, #36]	@ 0x24
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002268:	2100      	movs	r1, #0
 800226a:	4b47      	ldr	r3, [pc, #284]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x188>)
 800226c:	fb03 f201 	mul.w	r2, r3, r1
 8002270:	2300      	movs	r3, #0
 8002272:	fb00 f303 	mul.w	r3, r0, r3
 8002276:	4413      	add	r3, r2
 8002278:	4a43      	ldr	r2, [pc, #268]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x188>)
 800227a:	fba0 1202 	umull	r1, r2, r0, r2
 800227e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002280:	460a      	mov	r2, r1
 8002282:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002286:	4413      	add	r3, r2
 8002288:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800228a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800228c:	2200      	movs	r2, #0
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	61fa      	str	r2, [r7, #28]
 8002292:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002296:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800229a:	f7fd ff95 	bl	80001c8 <__aeabi_uldivmod>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4613      	mov	r3, r2
 80022a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022a6:	e053      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a8:	4b35      	ldr	r3, [pc, #212]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	2200      	movs	r2, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	617a      	str	r2, [r7, #20]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022ba:	f04f 0b00 	mov.w	fp, #0
 80022be:	4652      	mov	r2, sl
 80022c0:	465b      	mov	r3, fp
 80022c2:	f04f 0000 	mov.w	r0, #0
 80022c6:	f04f 0100 	mov.w	r1, #0
 80022ca:	0159      	lsls	r1, r3, #5
 80022cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022d0:	0150      	lsls	r0, r2, #5
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	ebb2 080a 	subs.w	r8, r2, sl
 80022da:	eb63 090b 	sbc.w	r9, r3, fp
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022f2:	ebb2 0408 	subs.w	r4, r2, r8
 80022f6:	eb63 0509 	sbc.w	r5, r3, r9
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	00eb      	lsls	r3, r5, #3
 8002304:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002308:	00e2      	lsls	r2, r4, #3
 800230a:	4614      	mov	r4, r2
 800230c:	461d      	mov	r5, r3
 800230e:	eb14 030a 	adds.w	r3, r4, sl
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	eb45 030b 	adc.w	r3, r5, fp
 8002318:	607b      	str	r3, [r7, #4]
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002326:	4629      	mov	r1, r5
 8002328:	028b      	lsls	r3, r1, #10
 800232a:	4621      	mov	r1, r4
 800232c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002330:	4621      	mov	r1, r4
 8002332:	028a      	lsls	r2, r1, #10
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800233a:	2200      	movs	r2, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	60fa      	str	r2, [r7, #12]
 8002340:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002344:	f7fd ff40 	bl	80001c8 <__aeabi_uldivmod>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4613      	mov	r3, r2
 800234e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002350:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	3301      	adds	r3, #1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002360:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800236a:	e002      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800236c:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x184>)
 800236e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002374:	4618      	mov	r0, r3
 8002376:	3740      	adds	r7, #64	@ 0x40
 8002378:	46bd      	mov	sp, r7
 800237a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	00f42400 	.word	0x00f42400
 8002388:	017d7840 	.word	0x017d7840

0800238c <memset>:
 800238c:	4402      	add	r2, r0
 800238e:	4603      	mov	r3, r0
 8002390:	4293      	cmp	r3, r2
 8002392:	d100      	bne.n	8002396 <memset+0xa>
 8002394:	4770      	bx	lr
 8002396:	f803 1b01 	strb.w	r1, [r3], #1
 800239a:	e7f9      	b.n	8002390 <memset+0x4>

0800239c <__libc_init_array>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	4d0d      	ldr	r5, [pc, #52]	@ (80023d4 <__libc_init_array+0x38>)
 80023a0:	4c0d      	ldr	r4, [pc, #52]	@ (80023d8 <__libc_init_array+0x3c>)
 80023a2:	1b64      	subs	r4, r4, r5
 80023a4:	10a4      	asrs	r4, r4, #2
 80023a6:	2600      	movs	r6, #0
 80023a8:	42a6      	cmp	r6, r4
 80023aa:	d109      	bne.n	80023c0 <__libc_init_array+0x24>
 80023ac:	4d0b      	ldr	r5, [pc, #44]	@ (80023dc <__libc_init_array+0x40>)
 80023ae:	4c0c      	ldr	r4, [pc, #48]	@ (80023e0 <__libc_init_array+0x44>)
 80023b0:	f000 f818 	bl	80023e4 <_init>
 80023b4:	1b64      	subs	r4, r4, r5
 80023b6:	10a4      	asrs	r4, r4, #2
 80023b8:	2600      	movs	r6, #0
 80023ba:	42a6      	cmp	r6, r4
 80023bc:	d105      	bne.n	80023ca <__libc_init_array+0x2e>
 80023be:	bd70      	pop	{r4, r5, r6, pc}
 80023c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80023c4:	4798      	blx	r3
 80023c6:	3601      	adds	r6, #1
 80023c8:	e7ee      	b.n	80023a8 <__libc_init_array+0xc>
 80023ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ce:	4798      	blx	r3
 80023d0:	3601      	adds	r6, #1
 80023d2:	e7f2      	b.n	80023ba <__libc_init_array+0x1e>
 80023d4:	08002414 	.word	0x08002414
 80023d8:	08002414 	.word	0x08002414
 80023dc:	08002414 	.word	0x08002414
 80023e0:	08002418 	.word	0x08002418

080023e4 <_init>:
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e6:	bf00      	nop
 80023e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ea:	bc08      	pop	{r3}
 80023ec:	469e      	mov	lr, r3
 80023ee:	4770      	bx	lr

080023f0 <_fini>:
 80023f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023f2:	bf00      	nop
 80023f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023f6:	bc08      	pop	{r3}
 80023f8:	469e      	mov	lr, r3
 80023fa:	4770      	bx	lr
